{
    "child_map": {
        "analysis.jaffle_shop.my_analysis": [],
        "exposure.jaffle_shop.company_projections": [],
        "exposure.jaffle_shop.crm_export": [],
        "exposure.jaffle_shop.weekly_metrics": [],
        "metric.jaffle_shop.cohorted_lifetime_value": [],
        "metric.jaffle_shop.count_orders": [],
        "model.jaffle_shop.customer_orders": [
            "model.jaffle_shop.dim_customers"
        ],
        "model.jaffle_shop.customer_payments": [
            "model.jaffle_shop.dim_customers"
        ],
        "model.jaffle_shop.dim_customers": [
            "exposure.jaffle_shop.crm_export",
            "exposure.jaffle_shop.weekly_metrics",
            "metric.jaffle_shop.cohorted_lifetime_value",
            "test.jaffle_shop.not_null_dim_customers_customer_id.dd91cd1c8d",
            "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4",
            "test.jaffle_shop.unique_dim_customers_customer_id.15c9f1e2fd"
        ],
        "model.jaffle_shop.fct_orders": [
            "exposure.jaffle_shop.company_projections",
            "exposure.jaffle_shop.crm_export",
            "metric.jaffle_shop.count_orders",
            "test.jaffle_shop.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768",
            "test.jaffle_shop.not_null_fct_orders_amount.66810a8d08",
            "test.jaffle_shop.not_null_fct_orders_bank_transfer_amount.d808dd4fab",
            "test.jaffle_shop.not_null_fct_orders_coupon_amount.8a700a9568",
            "test.jaffle_shop.not_null_fct_orders_credit_card_amount.56131cba63",
            "test.jaffle_shop.not_null_fct_orders_customer_id.16fe324f7b",
            "test.jaffle_shop.not_null_fct_orders_gift_card_amount.ec93756487",
            "test.jaffle_shop.not_null_fct_orders_order_id.4e687af8d0",
            "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers.ab4e71dd49",
            "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4",
            "test.jaffle_shop.unique_fct_orders_order_id.523ddb6ce5"
        ],
        "model.jaffle_shop.hidden_model": [],
        "model.jaffle_shop.order_payments": [
            "model.jaffle_shop.fct_orders"
        ],
        "model.jaffle_shop.stg_customers": [
            "model.jaffle_shop.dim_customers",
            "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "test.jaffle_shop.tagged_data_test",
            "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"
        ],
        "model.jaffle_shop.stg_orders": [
            "analysis.jaffle_shop.my_analysis",
            "model.jaffle_shop.customer_orders",
            "model.jaffle_shop.customer_payments",
            "model.jaffle_shop.fct_orders",
            "model.jaffle_shop.hidden_model",
            "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
            "test.jaffle_shop.example_data_test",
            "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"
        ],
        "model.jaffle_shop.stg_payments": [
            "model.jaffle_shop.customer_payments",
            "model.jaffle_shop.order_payments",
            "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
            "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
            "test.jaffle_shop.unique_stg_payments_payment_id.3744510712"
        ],
        "seed.jaffle_shop.raw_customers": [
            "model.jaffle_shop.stg_customers"
        ],
        "seed.jaffle_shop.raw_orders": [
            "model.jaffle_shop.stg_orders"
        ],
        "seed.jaffle_shop.raw_payments": [
            "model.jaffle_shop.stg_payments"
        ],
        "source.jaffle_shop.payments.orders": [
            "model.jaffle_shop.hidden_model"
        ],
        "source.jaffle_shop.payments.tagged_source": [],
        "test.jaffle_shop.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": [],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [],
        "test.jaffle_shop.example_data_test": [],
        "test.jaffle_shop.not_null_dim_customers_customer_id.dd91cd1c8d": [],
        "test.jaffle_shop.not_null_fct_orders_amount.66810a8d08": [],
        "test.jaffle_shop.not_null_fct_orders_bank_transfer_amount.d808dd4fab": [],
        "test.jaffle_shop.not_null_fct_orders_coupon_amount.8a700a9568": [],
        "test.jaffle_shop.not_null_fct_orders_credit_card_amount.56131cba63": [],
        "test.jaffle_shop.not_null_fct_orders_customer_id.16fe324f7b": [],
        "test.jaffle_shop.not_null_fct_orders_gift_card_amount.ec93756487": [],
        "test.jaffle_shop.not_null_fct_orders_order_id.4e687af8d0": [],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [],
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers.ab4e71dd49": [],
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": [],
        "test.jaffle_shop.tagged_data_test": [],
        "test.jaffle_shop.unique_dim_customers_customer_id.15c9f1e2fd": [],
        "test.jaffle_shop.unique_fct_orders_order_id.523ddb6ce5": [],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": []
    },
    "disabled": {},
    "docs": {
        "dbt.__overview__": {
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion",
            "name": "__overview__",
            "original_file_path": "docs/overview.md",
            "package_name": "dbt",
            "path": "overview.md",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "unique_id": "dbt.__overview__"
        },
        "jaffle_shop.__dbt_utils__": {
            "block_contents": "## DBT_UTILS package overview\nThis [dbt package](https://docs.getdbt.com/docs/building-a-dbt-project/package-management) is a collection of tools to help with common tasks.",
            "name": "__dbt_utils__",
            "original_file_path": "models/overview.md",
            "package_name": "jaffle_shop",
            "path": "overview.md",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "unique_id": "jaffle_shop.__dbt_utils__"
        },
        "jaffle_shop.__jaffle_shop__": {
            "block_contents": "## Jaffle_shop Project level overview example\nThis [dbt](https://www.getdbt.com/) project may have only one project (`jaffle_shop`) currently.\nHowever there may be other projects included in your own projects.\n\nYou can assign a unique overview for each project by adding a docs block in an .md file of your project\nand giving it a name with the following convention { \\__project_name__ }",
            "name": "__jaffle_shop__",
            "original_file_path": "models/overview.md",
            "package_name": "jaffle_shop",
            "path": "overview.md",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "unique_id": "jaffle_shop.__jaffle_shop__"
        },
        "jaffle_shop.__overview__": {
            "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for demonstrations and tutorials.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop).",
            "name": "__overview__",
            "original_file_path": "models/overview.md",
            "package_name": "jaffle_shop",
            "path": "overview.md",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "unique_id": "jaffle_shop.__overview__"
        },
        "jaffle_shop.orders_status": {
            "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
            "name": "orders_status",
            "original_file_path": "models/marts/core/docs.md",
            "package_name": "jaffle_shop",
            "path": "marts/core/docs.md",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "unique_id": "jaffle_shop.orders_status"
        }
    },
    "exposures": {
        "exposure.jaffle_shop.company_projections": {
            "created_at": 1648613901.3489637,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "A model that predicts the future revenue of a company.\n",
            "fqn": [
                "jaffle_shop",
                "company_projections"
            ],
            "maturity": "low",
            "meta": {},
            "name": "company_projections",
            "original_file_path": "models/export.yml",
            "owner": {
                "email": "data_science@example.com",
                "name": "Data Science Team"
            },
            "package_name": "jaffle_shop",
            "path": "export.yml",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "resource_type": "exposure",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "sources": [],
            "tags": [],
            "type": "ml",
            "unique_id": "exposure.jaffle_shop.company_projections",
            "url": null
        },
        "exposure.jaffle_shop.crm_export": {
            "created_at": 1648613901.3428972,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.fct_orders",
                    "model.jaffle_shop.dim_customers"
                ]
            },
            "description": "An export model that is synced to our CRM nightly at 11pm ET\n",
            "fqn": [
                "jaffle_shop",
                "crm_export"
            ],
            "maturity": "medium",
            "meta": {},
            "name": "crm_export",
            "original_file_path": "models/export.yml",
            "owner": {
                "email": "alice@example.com",
                "name": "Alice Analyst"
            },
            "package_name": "jaffle_shop",
            "path": "export.yml",
            "refs": [
                [
                    "fct_orders"
                ],
                [
                    "dim_customers"
                ]
            ],
            "resource_type": "exposure",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "sources": [],
            "tags": [],
            "type": "application",
            "unique_id": "exposure.jaffle_shop.crm_export",
            "url": null
        },
        "exposure.jaffle_shop.weekly_metrics": {
            "created_at": 1648613901.3462582,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.dim_customers"
                ]
            },
            "description": "The Big Numbers, shared in #product every Monday morning. **Cool dashboard**\n",
            "fqn": [
                "jaffle_shop",
                "weekly_metrics"
            ],
            "maturity": "high",
            "meta": {},
            "name": "weekly_metrics",
            "original_file_path": "models/export.yml",
            "owner": {
                "email": "data@example.com",
                "name": "Data Team"
            },
            "package_name": "jaffle_shop",
            "path": "export.yml",
            "refs": [
                [
                    "dim_customers"
                ]
            ],
            "resource_type": "exposure",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "sources": [],
            "tags": [],
            "type": "dashboard",
            "unique_id": "exposure.jaffle_shop.weekly_metrics",
            "url": "https://www.getdbt.com"
        }
    },
    "macros": {
        "macro.dbt.after_commit": {
            "arguments": [],
            "created_at": 1648613900.4458768,
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "meta": {},
            "name": "after_commit",
            "original_file_path": "macros/materializations/hooks.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/hooks.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.after_commit"
        },
        "macro.dbt.alter_column_comment": {
            "arguments": [],
            "created_at": 1648613900.6311328,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_column_comment"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "meta": {},
            "name": "alter_column_comment",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.alter_column_comment"
        },
        "macro.dbt.alter_column_type": {
            "arguments": [],
            "created_at": 1648613900.6256204,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "meta": {},
            "name": "alter_column_type",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.alter_column_type"
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "arguments": [],
            "created_at": 1648613900.6277804,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "meta": {},
            "name": "alter_relation_add_remove_columns",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.alter_relation_add_remove_columns"
        },
        "macro.dbt.alter_relation_comment": {
            "arguments": [],
            "created_at": 1648613900.6319995,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_relation_comment"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "meta": {},
            "name": "alter_relation_comment",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.alter_relation_comment"
        },
        "macro.dbt.before_begin": {
            "arguments": [],
            "created_at": 1648613900.4451768,
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "meta": {},
            "name": "before_begin",
            "original_file_path": "macros/materializations/hooks.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/hooks.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.before_begin"
        },
        "macro.dbt.build_snapshot_staging_table": {
            "arguments": [],
            "created_at": 1648613900.5756228,
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "meta": {},
            "name": "build_snapshot_staging_table",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.build_snapshot_staging_table"
        },
        "macro.dbt.build_snapshot_table": {
            "arguments": [],
            "created_at": 1648613900.573968,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "meta": {},
            "name": "build_snapshot_table",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.build_snapshot_table"
        },
        "macro.dbt.check_for_schema_changes": {
            "arguments": [],
            "created_at": 1648613900.5029414,
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "check_for_schema_changes",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.check_for_schema_changes"
        },
        "macro.dbt.check_schema_exists": {
            "arguments": [],
            "created_at": 1648613900.6124613,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__check_schema_exists"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "meta": {},
            "name": "check_schema_exists",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.check_schema_exists"
        },
        "macro.dbt.collect_freshness": {
            "arguments": [],
            "created_at": 1648613900.6159308,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "meta": {},
            "name": "collect_freshness",
            "original_file_path": "macros/adapters/freshness.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/freshness.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.collect_freshness"
        },
        "macro.dbt.convert_datetime": {
            "arguments": [],
            "created_at": 1648613900.5934021,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "convert_datetime",
            "original_file_path": "macros/etc/datetime.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/datetime.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.convert_datetime"
        },
        "macro.dbt.create_columns": {
            "arguments": [],
            "created_at": 1648613900.5696814,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "meta": {},
            "name": "create_columns",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_columns"
        },
        "macro.dbt.create_csv_table": {
            "arguments": [],
            "created_at": 1648613900.4586358,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "meta": {},
            "name": "create_csv_table",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_csv_table"
        },
        "macro.dbt.create_indexes": {
            "arguments": [],
            "created_at": 1648613900.6187284,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "meta": {},
            "name": "create_indexes",
            "original_file_path": "macros/adapters/indexes.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/indexes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_indexes"
        },
        "macro.dbt.create_or_replace_view": {
            "arguments": [],
            "created_at": 1648613900.4908583,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "create_or_replace_view",
            "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/create_or_replace_view.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_or_replace_view"
        },
        "macro.dbt.create_schema": {
            "arguments": [],
            "created_at": 1648613900.6052706,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_schema"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "create_schema",
            "original_file_path": "macros/adapters/schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_schema"
        },
        "macro.dbt.create_table_as": {
            "arguments": [],
            "created_at": 1648613900.4778526,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_table_as"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "meta": {},
            "name": "create_table_as",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/table/create_table_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_table_as"
        },
        "macro.dbt.create_view_as": {
            "arguments": [],
            "created_at": 1648613900.4875164,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_view_as"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "meta": {},
            "name": "create_view_as",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/create_view_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.create_view_as"
        },
        "macro.dbt.current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.6150546,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}",
            "meta": {},
            "name": "current_timestamp",
            "original_file_path": "macros/adapters/freshness.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/freshness.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.current_timestamp"
        },
        "macro.dbt.dates_in_range": {
            "arguments": [],
            "created_at": 1648613900.5963037,
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "meta": {},
            "name": "dates_in_range",
            "original_file_path": "macros/etc/datetime.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/datetime.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.dates_in_range"
        },
        "macro.dbt.default__alter_column_comment": {
            "arguments": [],
            "created_at": 1648613900.6315255,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__alter_column_comment",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__alter_column_comment"
        },
        "macro.dbt.default__alter_column_type": {
            "arguments": [],
            "created_at": 1648613900.627058,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__alter_column_type",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__alter_column_type"
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "arguments": [],
            "created_at": 1648613900.629701,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__alter_relation_add_remove_columns",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns"
        },
        "macro.dbt.default__alter_relation_comment": {
            "arguments": [],
            "created_at": 1648613900.6323903,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__alter_relation_comment",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__alter_relation_comment"
        },
        "macro.dbt.default__build_snapshot_table": {
            "arguments": [],
            "created_at": 1648613900.5745914,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "meta": {},
            "name": "default__build_snapshot_table",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__build_snapshot_table"
        },
        "macro.dbt.default__check_schema_exists": {
            "arguments": [],
            "created_at": 1648613900.6131802,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__check_schema_exists",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__check_schema_exists"
        },
        "macro.dbt.default__collect_freshness": {
            "arguments": [],
            "created_at": 1648613900.616931,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__collect_freshness",
            "original_file_path": "macros/adapters/freshness.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/freshness.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__collect_freshness"
        },
        "macro.dbt.default__create_columns": {
            "arguments": [],
            "created_at": 1648613900.5703688,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "meta": {},
            "name": "default__create_columns",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_columns"
        },
        "macro.dbt.default__create_csv_table": {
            "arguments": [],
            "created_at": 1648613900.4607666,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__create_csv_table",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_csv_table"
        },
        "macro.dbt.default__create_indexes": {
            "arguments": [],
            "created_at": 1648613900.6196887,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "meta": {},
            "name": "default__create_indexes",
            "original_file_path": "macros/adapters/indexes.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/indexes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_indexes"
        },
        "macro.dbt.default__create_schema": {
            "arguments": [],
            "created_at": 1648613900.6057086,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "meta": {},
            "name": "default__create_schema",
            "original_file_path": "macros/adapters/schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_schema"
        },
        "macro.dbt.default__create_table_as": {
            "arguments": [],
            "created_at": 1648613900.478857,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "meta": {},
            "name": "default__create_table_as",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/table/create_table_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_table_as"
        },
        "macro.dbt.default__create_view_as": {
            "arguments": [],
            "created_at": 1648613900.4881248,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "meta": {},
            "name": "default__create_view_as",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/create_view_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__create_view_as"
        },
        "macro.dbt.default__current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.6153977,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
            "meta": {},
            "name": "default__current_timestamp",
            "original_file_path": "macros/adapters/freshness.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/freshness.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__current_timestamp"
        },
        "macro.dbt.default__drop_relation": {
            "arguments": [],
            "created_at": 1648613900.6387491,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "meta": {},
            "name": "default__drop_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__drop_relation"
        },
        "macro.dbt.default__drop_schema": {
            "arguments": [],
            "created_at": 1648613900.6065252,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "meta": {},
            "name": "default__drop_schema",
            "original_file_path": "macros/adapters/schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__drop_schema"
        },
        "macro.dbt.default__generate_alias_name": {
            "arguments": [],
            "created_at": 1648613900.601813,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__generate_alias_name",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__generate_alias_name"
        },
        "macro.dbt.default__generate_database_name": {
            "arguments": [],
            "created_at": 1648613900.6002898,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__generate_database_name",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_database.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__generate_database_name"
        },
        "macro.dbt.default__generate_schema_name": {
            "arguments": [],
            "created_at": 1648613900.6036415,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__generate_schema_name",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__generate_schema_name"
        },
        "macro.dbt.default__get_batch_size": {
            "arguments": [],
            "created_at": 1648613900.4637537,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_batch_size",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_batch_size"
        },
        "macro.dbt.default__get_binding_char": {
            "arguments": [],
            "created_at": 1648613900.463118,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_binding_char",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_binding_char"
        },
        "macro.dbt.default__get_catalog": {
            "arguments": [],
            "created_at": 1648613900.609755,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_catalog",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_catalog"
        },
        "macro.dbt.default__get_columns_in_query": {
            "arguments": [],
            "created_at": 1648613900.625064,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_columns_in_query",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_columns_in_query"
        },
        "macro.dbt.default__get_columns_in_relation": {
            "arguments": [],
            "created_at": 1648613900.6230881,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_columns_in_relation",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_columns_in_relation"
        },
        "macro.dbt.default__get_create_index_sql": {
            "arguments": [],
            "created_at": 1648613900.6183558,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_create_index_sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/indexes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_create_index_sql"
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "arguments": [],
            "created_at": 1648613900.4773703,
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_create_table_as_sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/table/create_table_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_create_table_as_sql"
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "arguments": [],
            "created_at": 1648613900.4870896,
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_create_view_as_sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/create_view_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_create_view_as_sql"
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5166326,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_delete_insert_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql"
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5187287,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_insert_overwrite_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql"
        },
        "macro.dbt.default__get_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.515081,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_merge_sql"
        },
        "macro.dbt.default__get_or_create_relation": {
            "arguments": [],
            "created_at": 1648613900.64256,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "meta": {},
            "name": "default__get_or_create_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_or_create_relation"
        },
        "macro.dbt.default__get_test_sql": {
            "arguments": [],
            "created_at": 1648613900.583694,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_test_sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/tests/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_test_sql"
        },
        "macro.dbt.default__get_where_subquery": {
            "arguments": [],
            "created_at": 1648613900.5855427,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_where_subquery",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/tests/where_subquery.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__get_where_subquery"
        },
        "macro.dbt.default__handle_existing_table": {
            "arguments": [],
            "created_at": 1648613900.4921865,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__handle_existing_table",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__handle_existing_table"
        },
        "macro.dbt.default__information_schema_name": {
            "arguments": [],
            "created_at": 1648613900.6105664,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "meta": {},
            "name": "default__information_schema_name",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__information_schema_name"
        },
        "macro.dbt.default__list_relations_without_caching": {
            "arguments": [],
            "created_at": 1648613900.6140034,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__list_relations_without_caching",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__list_relations_without_caching"
        },
        "macro.dbt.default__list_schemas": {
            "arguments": [],
            "created_at": 1648613900.6119714,
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__list_schemas",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__list_schemas"
        },
        "macro.dbt.default__load_csv_rows": {
            "arguments": [],
            "created_at": 1648613900.4683447,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__load_csv_rows",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__load_csv_rows"
        },
        "macro.dbt.default__make_temp_relation": {
            "arguments": [],
            "created_at": 1648613900.6378222,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "meta": {},
            "name": "default__make_temp_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__make_temp_relation"
        },
        "macro.dbt.default__persist_docs": {
            "arguments": [],
            "created_at": 1648613900.6341577,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "meta": {},
            "name": "default__persist_docs",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__persist_docs"
        },
        "macro.dbt.default__post_snapshot": {
            "arguments": [],
            "created_at": 1648613900.570973,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "meta": {},
            "name": "default__post_snapshot",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__post_snapshot"
        },
        "macro.dbt.default__rename_relation": {
            "arguments": [],
            "created_at": 1648613900.6406784,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "meta": {},
            "name": "default__rename_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__rename_relation"
        },
        "macro.dbt.default__reset_csv_table": {
            "arguments": [],
            "created_at": 1648613900.4625127,
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__reset_csv_table",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__reset_csv_table"
        },
        "macro.dbt.default__snapshot_get_time": {
            "arguments": [],
            "created_at": 1648613900.5551374,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
            "meta": {},
            "name": "default__snapshot_get_time",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__snapshot_get_time"
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "arguments": [],
            "created_at": 1648613900.5545723,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "meta": {},
            "name": "default__snapshot_hash_arguments",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__snapshot_hash_arguments"
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.577286,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "meta": {},
            "name": "default__snapshot_merge_sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__snapshot_merge_sql"
        },
        "macro.dbt.default__snapshot_staging_table": {
            "arguments": [],
            "created_at": 1648613900.573505,
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__snapshot_staging_table",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__snapshot_staging_table"
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "arguments": [],
            "created_at": 1648613900.5576296,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "meta": {},
            "name": "default__snapshot_string_as_time",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__snapshot_string_as_time"
        },
        "macro.dbt.default__test_accepted_values": {
            "arguments": [],
            "created_at": 1648613900.6463373,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_accepted_values",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/generic_test_sql/accepted_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__test_accepted_values"
        },
        "macro.dbt.default__test_not_null": {
            "arguments": [],
            "created_at": 1648613900.6448662,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_not_null",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/generic_test_sql/not_null.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__test_not_null"
        },
        "macro.dbt.default__test_relationships": {
            "arguments": [],
            "created_at": 1648613900.6472237,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_relationships",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/generic_test_sql/relationships.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__test_relationships"
        },
        "macro.dbt.default__test_unique": {
            "arguments": [],
            "created_at": 1648613900.6442938,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_unique",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/generic_test_sql/unique.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__test_unique"
        },
        "macro.dbt.default__truncate_relation": {
            "arguments": [],
            "created_at": 1648613900.6395476,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "meta": {},
            "name": "default__truncate_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.default__truncate_relation"
        },
        "macro.dbt.diff_column_data_types": {
            "arguments": [],
            "created_at": 1648613900.5248134,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "diff_column_data_types",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.diff_column_data_types"
        },
        "macro.dbt.diff_columns": {
            "arguments": [],
            "created_at": 1648613900.5233998,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "diff_columns",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.diff_columns"
        },
        "macro.dbt.drop_relation": {
            "arguments": [],
            "created_at": 1648613900.6382473,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "drop_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.drop_relation"
        },
        "macro.dbt.drop_relation_if_exists": {
            "arguments": [],
            "created_at": 1648613900.6435394,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "meta": {},
            "name": "drop_relation_if_exists",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.drop_relation_if_exists"
        },
        "macro.dbt.drop_schema": {
            "arguments": [],
            "created_at": 1648613900.6060846,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_schema"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "drop_schema",
            "original_file_path": "macros/adapters/schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.drop_schema"
        },
        "macro.dbt.generate_alias_name": {
            "arguments": [],
            "created_at": 1648613900.6012635,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "meta": {},
            "name": "generate_alias_name",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.generate_alias_name"
        },
        "macro.dbt.generate_database_name": {
            "arguments": [],
            "created_at": 1648613900.5996835,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "meta": {},
            "name": "generate_database_name",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_database.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.generate_database_name"
        },
        "macro.dbt.generate_schema_name": {
            "arguments": [],
            "created_at": 1648613900.6030107,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "meta": {},
            "name": "generate_schema_name",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.generate_schema_name"
        },
        "macro.dbt.generate_schema_name_for_env": {
            "arguments": [],
            "created_at": 1648613900.6043262,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "generate_schema_name_for_env",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.generate_schema_name_for_env"
        },
        "macro.dbt.get_batch_size": {
            "arguments": [],
            "created_at": 1648613900.4634848,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_batch_size",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_batch_size"
        },
        "macro.dbt.get_binding_char": {
            "arguments": [],
            "created_at": 1648613900.462848,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_binding_char",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_binding_char"
        },
        "macro.dbt.get_catalog": {
            "arguments": [],
            "created_at": 1648613900.6091225,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_catalog",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_catalog"
        },
        "macro.dbt.get_columns_in_query": {
            "arguments": [],
            "created_at": 1648613900.6242616,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_columns_in_query",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_columns_in_query"
        },
        "macro.dbt.get_columns_in_relation": {
            "arguments": [],
            "created_at": 1648613900.622712,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_columns_in_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_columns_in_relation",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_columns_in_relation"
        },
        "macro.dbt.get_create_index_sql": {
            "arguments": [],
            "created_at": 1648613900.6180298,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_create_index_sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/indexes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_create_index_sql"
        },
        "macro.dbt.get_create_table_as_sql": {
            "arguments": [],
            "created_at": 1648613900.4769144,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_create_table_as_sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/table/create_table_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_create_table_as_sql"
        },
        "macro.dbt.get_create_view_as_sql": {
            "arguments": [],
            "created_at": 1648613900.4867058,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_create_view_as_sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/create_view_as.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_create_view_as_sql"
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5156302,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_delete_insert_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_delete_insert_merge_sql"
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5172458,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_insert_overwrite_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql"
        },
        "macro.dbt.get_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5122733,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_merge_sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_merge_sql"
        },
        "macro.dbt.get_or_create_relation": {
            "arguments": [],
            "created_at": 1648613900.641263,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_or_create_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_or_create_relation"
        },
        "macro.dbt.get_quoted_csv": {
            "arguments": [],
            "created_at": 1648613900.522108,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "get_quoted_csv",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_quoted_csv"
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "arguments": [],
            "created_at": 1648613900.4648945,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_seed_column_quoted_csv",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_seed_column_quoted_csv"
        },
        "macro.dbt.get_test_sql": {
            "arguments": [],
            "created_at": 1648613900.5829694,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_test_sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/tests/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_test_sql"
        },
        "macro.dbt.get_where_subquery": {
            "arguments": [],
            "created_at": 1648613900.5846276,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "meta": {},
            "name": "get_where_subquery",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/tests/where_subquery.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.get_where_subquery"
        },
        "macro.dbt.handle_existing_table": {
            "arguments": [],
            "created_at": 1648613900.4916587,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "handle_existing_table",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.handle_existing_table"
        },
        "macro.dbt.in_transaction": {
            "arguments": [],
            "created_at": 1648613900.4455435,
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "meta": {},
            "name": "in_transaction",
            "original_file_path": "macros/materializations/hooks.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/hooks.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.in_transaction"
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "arguments": [],
            "created_at": 1648613900.499927,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}",
            "meta": {},
            "name": "incremental_validate_on_schema_change",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.incremental_validate_on_schema_change"
        },
        "macro.dbt.information_schema_name": {
            "arguments": [],
            "created_at": 1648613900.6101966,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__information_schema_name"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "information_schema_name",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.information_schema_name"
        },
        "macro.dbt.is_incremental": {
            "arguments": [],
            "created_at": 1648613900.5202928,
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "meta": {},
            "name": "is_incremental",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.is_incremental"
        },
        "macro.dbt.list_relations_without_caching": {
            "arguments": [],
            "created_at": 1648613900.613628,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_relations_without_caching"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "list_relations_without_caching",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.list_relations_without_caching"
        },
        "macro.dbt.list_schemas": {
            "arguments": [],
            "created_at": 1648613900.6109924,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_schemas"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "list_schemas",
            "original_file_path": "macros/adapters/metadata.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/metadata.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.list_schemas"
        },
        "macro.dbt.load_csv_rows": {
            "arguments": [],
            "created_at": 1648613900.4653494,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__load_csv_rows"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "meta": {},
            "name": "load_csv_rows",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.load_csv_rows"
        },
        "macro.dbt.load_relation": {
            "arguments": [],
            "created_at": 1648613900.6430845,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "meta": {},
            "name": "load_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.load_relation"
        },
        "macro.dbt.make_hook_config": {
            "arguments": [],
            "created_at": 1648613900.4447906,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "meta": {},
            "name": "make_hook_config",
            "original_file_path": "macros/materializations/hooks.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/hooks.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.make_hook_config"
        },
        "macro.dbt.make_temp_relation": {
            "arguments": [],
            "created_at": 1648613900.6370635,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_temp_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}",
            "meta": {},
            "name": "make_temp_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.make_temp_relation"
        },
        "macro.dbt.materialization_incremental_default": {
            "arguments": [],
            "created_at": 1648613900.5355315,
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.get_delete_insert_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "meta": {},
            "name": "materialization_incremental_default",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/incremental.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_incremental_default"
        },
        "macro.dbt.materialization_seed_default": {
            "arguments": [],
            "created_at": 1648613900.4521124,
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "meta": {},
            "name": "materialization_seed_default",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/seed.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_seed_default"
        },
        "macro.dbt.materialization_snapshot_default": {
            "arguments": [],
            "created_at": 1648613900.5472102,
            "depends_on": {
                "macros": [
                    "macro.dbt.create_schema",
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "meta": {},
            "name": "materialization_snapshot_default",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/snapshot.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_snapshot_default"
        },
        "macro.dbt.materialization_table_default": {
            "arguments": [],
            "created_at": 1648613900.4758415,
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "meta": {},
            "name": "materialization_table_default",
            "original_file_path": "macros/materializations/models/table/table.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/table/table.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_table_default"
        },
        "macro.dbt.materialization_test_default": {
            "arguments": [],
            "created_at": 1648613900.5818937,
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "meta": {},
            "name": "materialization_test_default",
            "original_file_path": "macros/materializations/tests/test.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/tests/test.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_test_default"
        },
        "macro.dbt.materialization_view_default": {
            "arguments": [],
            "created_at": 1648613900.4857628,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "meta": {},
            "name": "materialization_view_default",
            "original_file_path": "macros/materializations/models/view/view.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/view/view.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.materialization_view_default"
        },
        "macro.dbt.noop_statement": {
            "arguments": [],
            "created_at": 1648613900.5894883,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "noop_statement",
            "original_file_path": "macros/etc/statement.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/statement.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.noop_statement"
        },
        "macro.dbt.partition_range": {
            "arguments": [],
            "created_at": 1648613900.598127,
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "meta": {},
            "name": "partition_range",
            "original_file_path": "macros/etc/datetime.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/datetime.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.partition_range"
        },
        "macro.dbt.persist_docs": {
            "arguments": [],
            "created_at": 1648613900.6330173,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "meta": {},
            "name": "persist_docs",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/persist_docs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.persist_docs"
        },
        "macro.dbt.post_snapshot": {
            "arguments": [],
            "created_at": 1648613900.5707612,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "post_snapshot",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.post_snapshot"
        },
        "macro.dbt.process_schema_changes": {
            "arguments": [],
            "created_at": 1648613900.507526,
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}",
            "meta": {},
            "name": "process_schema_changes",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.process_schema_changes"
        },
        "macro.dbt.py_current_timestring": {
            "arguments": [],
            "created_at": 1648613900.5986664,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "meta": {},
            "name": "py_current_timestring",
            "original_file_path": "macros/etc/datetime.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/datetime.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.py_current_timestring"
        },
        "macro.dbt.rename_relation": {
            "arguments": [],
            "created_at": 1648613900.6400144,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__rename_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "rename_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.rename_relation"
        },
        "macro.dbt.reset_csv_table": {
            "arguments": [],
            "created_at": 1648613900.4613166,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "meta": {},
            "name": "reset_csv_table",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/seeds/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.reset_csv_table"
        },
        "macro.dbt.run_hooks": {
            "arguments": [],
            "created_at": 1648613900.4443362,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "meta": {},
            "name": "run_hooks",
            "original_file_path": "macros/materializations/hooks.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/hooks.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.run_hooks"
        },
        "macro.dbt.run_query": {
            "arguments": [],
            "created_at": 1648613900.5901835,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "meta": {},
            "name": "run_query",
            "original_file_path": "macros/etc/statement.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/statement.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.run_query"
        },
        "macro.dbt.set_sql_header": {
            "arguments": [],
            "created_at": 1648613900.4404333,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "meta": {},
            "name": "set_sql_header",
            "original_file_path": "macros/materializations/configs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/configs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.set_sql_header"
        },
        "macro.dbt.should_full_refresh": {
            "arguments": [],
            "created_at": 1648613900.4411592,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "meta": {},
            "name": "should_full_refresh",
            "original_file_path": "macros/materializations/configs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/configs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.should_full_refresh"
        },
        "macro.dbt.should_store_failures": {
            "arguments": [],
            "created_at": 1648613900.4419086,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "meta": {},
            "name": "should_store_failures",
            "original_file_path": "macros/materializations/configs.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/configs.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.should_store_failures"
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "arguments": [],
            "created_at": 1648613900.559958,
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
            "meta": {},
            "name": "snapshot_check_all_get_existing_columns",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns"
        },
        "macro.dbt.snapshot_check_strategy": {
            "arguments": [],
            "created_at": 1648613900.5645218,
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.run_query",
                    "macro.dbt.snapshot_string_as_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "meta": {},
            "name": "snapshot_check_strategy",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_check_strategy"
        },
        "macro.dbt.snapshot_get_time": {
            "arguments": [],
            "created_at": 1648613900.5549057,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_get_time"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}",
            "meta": {},
            "name": "snapshot_get_time",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_get_time"
        },
        "macro.dbt.snapshot_hash_arguments": {
            "arguments": [],
            "created_at": 1648613900.554041,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "meta": {},
            "name": "snapshot_hash_arguments",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_hash_arguments"
        },
        "macro.dbt.snapshot_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.5766535,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_merge_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "meta": {},
            "name": "snapshot_merge_sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_merge_sql"
        },
        "macro.dbt.snapshot_staging_table": {
            "arguments": [],
            "created_at": 1648613900.571456,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "meta": {},
            "name": "snapshot_staging_table",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/helpers.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_staging_table"
        },
        "macro.dbt.snapshot_string_as_time": {
            "arguments": [],
            "created_at": 1648613900.5572116,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_string_as_time"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "meta": {},
            "name": "snapshot_string_as_time",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_string_as_time"
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "arguments": [],
            "created_at": 1648613900.5568342,
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "meta": {},
            "name": "snapshot_timestamp_strategy",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.snapshot_timestamp_strategy"
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "arguments": [],
            "created_at": 1648613900.623831,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "meta": {},
            "name": "sql_convert_columns_in_relation",
            "original_file_path": "macros/adapters/columns.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.sql_convert_columns_in_relation"
        },
        "macro.dbt.statement": {
            "arguments": [],
            "created_at": 1648613900.5880086,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "meta": {},
            "name": "statement",
            "original_file_path": "macros/etc/statement.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/etc/statement.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.statement"
        },
        "macro.dbt.strategy_dispatch": {
            "arguments": [],
            "created_at": 1648613900.5536475,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "meta": {},
            "name": "strategy_dispatch",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/snapshots/strategies.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.strategy_dispatch"
        },
        "macro.dbt.sync_column_schemas": {
            "arguments": [],
            "created_at": 1648613900.5058215,
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}",
            "meta": {},
            "name": "sync_column_schemas",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.sync_column_schemas"
        },
        "macro.dbt.test_accepted_values": {
            "arguments": [],
            "created_at": 1648613900.6498008,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "meta": {},
            "name": "test_accepted_values",
            "original_file_path": "tests/generic/builtin.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "tests/generic/builtin.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.test_accepted_values"
        },
        "macro.dbt.test_not_null": {
            "arguments": [],
            "created_at": 1648613900.6490893,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "meta": {},
            "name": "test_not_null",
            "original_file_path": "tests/generic/builtin.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "tests/generic/builtin.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.test_not_null"
        },
        "macro.dbt.test_relationships": {
            "arguments": [],
            "created_at": 1648613900.6504536,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "meta": {},
            "name": "test_relationships",
            "original_file_path": "tests/generic/builtin.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "tests/generic/builtin.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.test_relationships"
        },
        "macro.dbt.test_unique": {
            "arguments": [],
            "created_at": 1648613900.6485438,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "meta": {},
            "name": "test_unique",
            "original_file_path": "tests/generic/builtin.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "tests/generic/builtin.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.test_unique"
        },
        "macro.dbt.truncate_relation": {
            "arguments": [],
            "created_at": 1648613900.639169,
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "truncate_relation",
            "original_file_path": "macros/adapters/relation.sql",
            "package_name": "dbt",
            "patch_path": null,
            "path": "macros/adapters/relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/global_project",
            "tags": [],
            "unique_id": "macro.dbt.truncate_relation"
        },
        "macro.dbt_postgres.postgres__alter_column_comment": {
            "arguments": [],
            "created_at": 1648613900.4356525,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__alter_column_comment",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__alter_column_comment"
        },
        "macro.dbt_postgres.postgres__alter_relation_comment": {
            "arguments": [],
            "created_at": 1648613900.4342415,
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
            "meta": {},
            "name": "postgres__alter_relation_comment",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment"
        },
        "macro.dbt_postgres.postgres__check_schema_exists": {
            "arguments": [],
            "created_at": 1648613900.4297585,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__check_schema_exists",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__check_schema_exists"
        },
        "macro.dbt_postgres.postgres__create_schema": {
            "arguments": [],
            "created_at": 1648613900.424767,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__create_schema",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__create_schema"
        },
        "macro.dbt_postgres.postgres__create_table_as": {
            "arguments": [],
            "created_at": 1648613900.4228375,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__create_table_as",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__create_table_as"
        },
        "macro.dbt_postgres.postgres__current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.4299498,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__current_timestamp",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp"
        },
        "macro.dbt_postgres.postgres__drop_schema": {
            "arguments": [],
            "created_at": 1648613900.4255242,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__drop_schema",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__drop_schema"
        },
        "macro.dbt_postgres.postgres__get_catalog": {
            "arguments": [],
            "created_at": 1648613900.4378514,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__get_catalog",
            "original_file_path": "macros/catalog.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/catalog.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__get_catalog"
        },
        "macro.dbt_postgres.postgres__get_columns_in_relation": {
            "arguments": [],
            "created_at": 1648613900.4266422,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__get_columns_in_relation",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation"
        },
        "macro.dbt_postgres.postgres__get_create_index_sql": {
            "arguments": [],
            "created_at": 1648613900.4240327,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__get_create_index_sql",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql"
        },
        "macro.dbt_postgres.postgres__information_schema_name": {
            "arguments": [],
            "created_at": 1648613900.4279149,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__information_schema_name",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__information_schema_name"
        },
        "macro.dbt_postgres.postgres__list_relations_without_caching": {
            "arguments": [],
            "created_at": 1648613900.4275155,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__list_relations_without_caching",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching"
        },
        "macro.dbt_postgres.postgres__list_schemas": {
            "arguments": [],
            "created_at": 1648613900.428737,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__list_schemas",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__list_schemas"
        },
        "macro.dbt_postgres.postgres__make_temp_relation": {
            "arguments": [],
            "created_at": 1648613900.4326904,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__make_temp_relation",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__make_temp_relation"
        },
        "macro.dbt_postgres.postgres__snapshot_get_time": {
            "arguments": [],
            "created_at": 1648613900.430618,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__snapshot_get_time",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time"
        },
        "macro.dbt_postgres.postgres__snapshot_merge_sql": {
            "arguments": [],
            "created_at": 1648613900.439515,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
            "meta": {},
            "name": "postgres__snapshot_merge_sql",
            "original_file_path": "macros/materializations/snapshot_merge.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/materializations/snapshot_merge.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql"
        },
        "macro.dbt_postgres.postgres__snapshot_string_as_time": {
            "arguments": [],
            "created_at": 1648613900.430377,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__snapshot_string_as_time",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time"
        },
        "macro.dbt_postgres.postgres_escape_comment": {
            "arguments": [],
            "created_at": 1648613900.4337168,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
            "meta": {},
            "name": "postgres_escape_comment",
            "original_file_path": "macros/adapters.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/adapters.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres_escape_comment"
        },
        "macro.dbt_postgres.postgres_get_relations": {
            "arguments": [],
            "created_at": 1648613900.4136665,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
            "meta": {},
            "name": "postgres_get_relations",
            "original_file_path": "macros/relations.sql",
            "package_name": "dbt_postgres",
            "patch_path": null,
            "path": "macros/relations.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/.local/lib/python3.8/site-packages/dbt/include/postgres",
            "tags": [],
            "unique_id": "macro.dbt_postgres.postgres_get_relations"
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "arguments": [],
            "created_at": 1648613900.8029604,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "meta": {},
            "name": "_bigquery__get_matching_schemata",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata"
        },
        "macro.dbt_utils._is_ephemeral": {
            "arguments": [],
            "created_at": 1648613900.7485797,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "meta": {},
            "name": "_is_ephemeral",
            "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/_is_ephemeral.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils._is_ephemeral"
        },
        "macro.dbt_utils._is_relation": {
            "arguments": [],
            "created_at": 1648613900.781748,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "meta": {},
            "name": "_is_relation",
            "original_file_path": "macros/cross_db_utils/_is_relation.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/_is_relation.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils._is_relation"
        },
        "macro.dbt_utils.any_value": {
            "arguments": [],
            "created_at": 1648613900.7878287,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__any_value"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "meta": {},
            "name": "any_value",
            "original_file_path": "macros/cross_db_utils/any_value.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/any_value.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.any_value"
        },
        "macro.dbt_utils.bigquery__bool_or": {
            "arguments": [],
            "created_at": 1648613900.7739928,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}",
            "meta": {},
            "name": "bigquery__bool_or",
            "original_file_path": "macros/cross_db_utils/bool_or.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/bool_or.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__bool_or"
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7504492,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__current_timestamp",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp"
        },
        "macro.dbt_utils.bigquery__date_trunc": {
            "arguments": [],
            "created_at": 1648613900.7465942,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__date_trunc",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/date_trunc.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__date_trunc"
        },
        "macro.dbt_utils.bigquery__dateadd": {
            "arguments": [],
            "created_at": 1648613900.7378821,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__dateadd",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/dateadd.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__dateadd"
        },
        "macro.dbt_utils.bigquery__datediff": {
            "arguments": [],
            "created_at": 1648613900.7591429,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__datediff",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datediff.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__datediff"
        },
        "macro.dbt_utils.bigquery__escape_single_quotes": {
            "arguments": [],
            "created_at": 1648613900.7450535,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "meta": {},
            "name": "bigquery__escape_single_quotes",
            "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/escape_single_quotes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes"
        },
        "macro.dbt_utils.bigquery__except": {
            "arguments": [],
            "created_at": 1648613900.7431848,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__except",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/except.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__except"
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "arguments": [],
            "created_at": 1648613900.801608,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__get_tables_by_pattern_sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql"
        },
        "macro.dbt_utils.bigquery__hash": {
            "arguments": [],
            "created_at": 1648613900.735821,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
            "meta": {},
            "name": "bigquery__hash",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/hash.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__hash"
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "arguments": [],
            "created_at": 1648613900.8799803,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "meta": {},
            "name": "bigquery__haversine_distance",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/haversine_distance.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance"
        },
        "macro.dbt_utils.bigquery__identifier": {
            "arguments": [],
            "created_at": 1648613900.7405267,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
            "meta": {},
            "name": "bigquery__identifier",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/identifier.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__identifier"
        },
        "macro.dbt_utils.bigquery__intersect": {
            "arguments": [],
            "created_at": 1648613900.7695203,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__intersect",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/intersect.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__intersect"
        },
        "macro.dbt_utils.bigquery__position": {
            "arguments": [],
            "created_at": 1648613900.7421155,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
            "meta": {},
            "name": "bigquery__position",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/position.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__position"
        },
        "macro.dbt_utils.bigquery__right": {
            "arguments": [],
            "created_at": 1648613900.7657673,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "bigquery__right",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/right.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__right"
        },
        "macro.dbt_utils.bigquery__safe_cast": {
            "arguments": [],
            "created_at": 1648613900.7759192,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__safe_cast",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/safe_cast.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__safe_cast"
        },
        "macro.dbt_utils.bigquery__split_part": {
            "arguments": [],
            "created_at": 1648613900.754037,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__split_part",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/split_part.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__split_part"
        },
        "macro.dbt_utils.bigquery__type_bigint": {
            "arguments": [],
            "created_at": 1648613900.733655,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__type_bigint",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__type_bigint"
        },
        "macro.dbt_utils.bigquery__type_float": {
            "arguments": [],
            "created_at": 1648613900.7322032,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__type_float",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__type_float"
        },
        "macro.dbt_utils.bigquery__type_int": {
            "arguments": [],
            "created_at": 1648613900.7343693,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__type_int",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__type_int"
        },
        "macro.dbt_utils.bigquery__type_numeric": {
            "arguments": [],
            "created_at": 1648613900.7329226,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
            "meta": {},
            "name": "bigquery__type_numeric",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bigquery__type_numeric"
        },
        "macro.dbt_utils.bool_or": {
            "arguments": [],
            "created_at": 1648613900.7732532,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__bool_or"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "meta": {},
            "name": "bool_or",
            "original_file_path": "macros/cross_db_utils/bool_or.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/bool_or.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.bool_or"
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "arguments": [],
            "created_at": 1648613900.770327,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
            "meta": {},
            "name": "cast_bool_to_text",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.cast_bool_to_text"
        },
        "macro.dbt_utils.concat": {
            "arguments": [],
            "created_at": 1648613900.7802644,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "concat",
            "original_file_path": "macros/cross_db_utils/concat.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/concat.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.concat"
        },
        "macro.dbt_utils.current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7498217,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
            "meta": {},
            "name": "current_timestamp",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.current_timestamp"
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "arguments": [],
            "created_at": 1648613900.7508264,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
            "meta": {},
            "name": "current_timestamp_in_utc",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc"
        },
        "macro.dbt_utils.date_spine": {
            "arguments": [],
            "created_at": 1648613900.8836193,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "date_spine",
            "original_file_path": "macros/sql/date_spine.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/date_spine.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.date_spine"
        },
        "macro.dbt_utils.date_trunc": {
            "arguments": [],
            "created_at": 1648613900.7459714,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_trunc"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "date_trunc",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/date_trunc.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.date_trunc"
        },
        "macro.dbt_utils.dateadd": {
            "arguments": [],
            "created_at": 1648613900.7370768,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__dateadd"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "meta": {},
            "name": "dateadd",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/dateadd.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.dateadd"
        },
        "macro.dbt_utils.datediff": {
            "arguments": [],
            "created_at": 1648613900.7583482,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__datediff"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "meta": {},
            "name": "datediff",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datediff.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.datediff"
        },
        "macro.dbt_utils.default__any_value": {
            "arguments": [],
            "created_at": 1648613900.7880785,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}",
            "meta": {},
            "name": "default__any_value",
            "original_file_path": "macros/cross_db_utils/any_value.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/any_value.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__any_value"
        },
        "macro.dbt_utils.default__bool_or": {
            "arguments": [],
            "created_at": 1648613900.7735035,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}",
            "meta": {},
            "name": "default__bool_or",
            "original_file_path": "macros/cross_db_utils/bool_or.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/bool_or.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__bool_or"
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "arguments": [],
            "created_at": 1648613900.7707994,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "meta": {},
            "name": "default__cast_bool_to_text",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text"
        },
        "macro.dbt_utils.default__concat": {
            "arguments": [],
            "created_at": 1648613900.7805529,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "meta": {},
            "name": "default__concat",
            "original_file_path": "macros/cross_db_utils/concat.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/concat.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__concat"
        },
        "macro.dbt_utils.default__current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7500985,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "meta": {},
            "name": "default__current_timestamp",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__current_timestamp"
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "arguments": [],
            "created_at": 1648613900.7510877,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
            "meta": {},
            "name": "default__current_timestamp_in_utc",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc"
        },
        "macro.dbt_utils.default__date_spine": {
            "arguments": [],
            "created_at": 1648613900.8844705,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "meta": {},
            "name": "default__date_spine",
            "original_file_path": "macros/sql/date_spine.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/date_spine.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__date_spine"
        },
        "macro.dbt_utils.default__date_trunc": {
            "arguments": [],
            "created_at": 1648613900.7462835,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
            "meta": {},
            "name": "default__date_trunc",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/date_trunc.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__date_trunc"
        },
        "macro.dbt_utils.default__dateadd": {
            "arguments": [],
            "created_at": 1648613900.7374887,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "meta": {},
            "name": "default__dateadd",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/dateadd.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__dateadd"
        },
        "macro.dbt_utils.default__datediff": {
            "arguments": [],
            "created_at": 1648613900.7587564,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
            "meta": {},
            "name": "default__datediff",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datediff.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__datediff"
        },
        "macro.dbt_utils.default__escape_single_quotes": {
            "arguments": [],
            "created_at": 1648613900.7444031,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "meta": {},
            "name": "default__escape_single_quotes",
            "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/escape_single_quotes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__escape_single_quotes"
        },
        "macro.dbt_utils.default__except": {
            "arguments": [],
            "created_at": 1648613900.7430108,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "meta": {},
            "name": "default__except",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/except.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__except"
        },
        "macro.dbt_utils.default__generate_series": {
            "arguments": [],
            "created_at": 1648613900.7926838,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "meta": {},
            "name": "default__generate_series",
            "original_file_path": "macros/sql/generate_series.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/generate_series.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__generate_series"
        },
        "macro.dbt_utils.default__get_column_values": {
            "arguments": [],
            "created_at": 1648613900.8117757,
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_column_values",
            "original_file_path": "macros/sql/get_column_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_column_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_column_values"
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "arguments": [],
            "created_at": 1648613900.8830717,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_intervals_between",
            "original_file_path": "macros/sql/date_spine.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/date_spine.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_intervals_between"
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "arguments": [],
            "created_at": 1648613900.6606574,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_period_boundaries",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_period_boundaries"
        },
        "macro.dbt_utils.default__get_period_sql": {
            "arguments": [],
            "created_at": 1648613900.6626635,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_period_sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_period_sql"
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "arguments": [],
            "created_at": 1648613900.790972,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_powers_of_two",
            "original_file_path": "macros/sql/generate_series.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/generate_series.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_powers_of_two"
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "arguments": [],
            "created_at": 1648613900.7964408,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_query_results_as_dict",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_query_results_as_dict.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict"
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "arguments": [],
            "created_at": 1648613900.8916142,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_relations_by_pattern",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_relations_by_pattern.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern"
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "arguments": [],
            "created_at": 1648613900.8064747,
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_relations_by_prefix",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_relations_by_prefix.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix"
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "arguments": [],
            "created_at": 1648613900.7938046,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}",
            "meta": {},
            "name": "default__get_table_types_sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_table_types_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_table_types_sql"
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "arguments": [],
            "created_at": 1648613900.7999132,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "meta": {},
            "name": "default__get_tables_by_pattern_sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql"
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "arguments": [],
            "created_at": 1648613900.8259835,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "meta": {},
            "name": "default__get_tables_by_prefix_sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql"
        },
        "macro.dbt_utils.default__get_url_host": {
            "arguments": [],
            "created_at": 1648613900.6770985,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_url_host",
            "original_file_path": "macros/web/get_url_host.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_host.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_url_host"
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "arguments": [],
            "created_at": 1648613900.6787894,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__get_url_parameter",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_parameter.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_url_parameter"
        },
        "macro.dbt_utils.default__get_url_path": {
            "arguments": [],
            "created_at": 1648613900.6815262,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
            "meta": {},
            "name": "default__get_url_path",
            "original_file_path": "macros/web/get_url_path.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_path.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__get_url_path"
        },
        "macro.dbt_utils.default__group_by": {
            "arguments": [],
            "created_at": 1648613900.8132007,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "meta": {},
            "name": "default__group_by",
            "original_file_path": "macros/sql/groupby.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/groupby.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__group_by"
        },
        "macro.dbt_utils.default__hash": {
            "arguments": [],
            "created_at": 1648613900.735514,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
            "meta": {},
            "name": "default__hash",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/hash.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__hash"
        },
        "macro.dbt_utils.default__haversine_distance": {
            "arguments": [],
            "created_at": 1648613900.8474448,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__haversine_distance",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/haversine_distance.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__haversine_distance"
        },
        "macro.dbt_utils.default__identifier": {
            "arguments": [],
            "created_at": 1648613900.7402818,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
            "meta": {},
            "name": "default__identifier",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/identifier.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__identifier"
        },
        "macro.dbt_utils.default__intersect": {
            "arguments": [],
            "created_at": 1648613900.7693472,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "meta": {},
            "name": "default__intersect",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/intersect.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__intersect"
        },
        "macro.dbt_utils.default__last_day": {
            "arguments": [],
            "created_at": 1648613900.7781615,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "meta": {},
            "name": "default__last_day",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/last_day.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__last_day"
        },
        "macro.dbt_utils.default__length": {
            "arguments": [],
            "created_at": 1648613900.7672057,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
            "meta": {},
            "name": "default__length",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/length.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__length"
        },
        "macro.dbt_utils.default__log_info": {
            "arguments": [],
            "created_at": 1648613900.724564,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__log_info",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/log_info.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__log_info"
        },
        "macro.dbt_utils.default__nullcheck": {
            "arguments": [],
            "created_at": 1648613900.8434815,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "meta": {},
            "name": "default__nullcheck",
            "original_file_path": "macros/sql/nullcheck.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/nullcheck.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__nullcheck"
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "arguments": [],
            "created_at": 1648613900.8417897,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__nullcheck_table",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/nullcheck_table.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__nullcheck_table"
        },
        "macro.dbt_utils.default__pivot": {
            "arguments": [],
            "created_at": 1648613900.8384123,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "meta": {},
            "name": "default__pivot",
            "original_file_path": "macros/sql/pivot.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/pivot.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__pivot"
        },
        "macro.dbt_utils.default__position": {
            "arguments": [],
            "created_at": 1648613900.7417934,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "default__position",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/position.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__position"
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "arguments": [],
            "created_at": 1648613900.7281907,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__pretty_log_format",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__pretty_log_format"
        },
        "macro.dbt_utils.default__pretty_time": {
            "arguments": [],
            "created_at": 1648613900.7258313,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "meta": {},
            "name": "default__pretty_time",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/pretty_time.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__pretty_time"
        },
        "macro.dbt_utils.default__replace": {
            "arguments": [],
            "created_at": 1648613900.7723877,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
            "meta": {},
            "name": "default__replace",
            "original_file_path": "macros/cross_db_utils/replace.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/replace.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__replace"
        },
        "macro.dbt_utils.default__right": {
            "arguments": [],
            "created_at": 1648613900.7653923,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "default__right",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/right.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__right"
        },
        "macro.dbt_utils.default__safe_add": {
            "arguments": [],
            "created_at": 1648613900.840091,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "meta": {},
            "name": "default__safe_add",
            "original_file_path": "macros/sql/safe_add.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/safe_add.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__safe_add"
        },
        "macro.dbt_utils.default__safe_cast": {
            "arguments": [],
            "created_at": 1648613900.7753015,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "meta": {},
            "name": "default__safe_cast",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/safe_cast.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__safe_cast"
        },
        "macro.dbt_utils.default__split_part": {
            "arguments": [],
            "created_at": 1648613900.7536175,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "meta": {},
            "name": "default__split_part",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/split_part.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__split_part"
        },
        "macro.dbt_utils.default__star": {
            "arguments": [],
            "created_at": 1648613900.896148,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' -%} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
            "meta": {},
            "name": "default__star",
            "original_file_path": "macros/sql/star.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/star.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__star"
        },
        "macro.dbt_utils.default__string_literal": {
            "arguments": [],
            "created_at": 1648613900.7684486,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "meta": {},
            "name": "default__string_literal",
            "original_file_path": "macros/cross_db_utils/literal.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/literal.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__string_literal"
        },
        "macro.dbt_utils.default__surrogate_key": {
            "arguments": [],
            "created_at": 1648613900.8880684,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
            "meta": {},
            "name": "default__surrogate_key",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/surrogate_key.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__surrogate_key"
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "arguments": [],
            "created_at": 1648613900.6895466,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_accepted_range",
            "original_file_path": "macros/schema_tests/accepted_range.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/accepted_range.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_accepted_range"
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "arguments": [],
            "created_at": 1648613900.7012665,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_at_least_one",
            "original_file_path": "macros/schema_tests/at_least_one.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/at_least_one.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_at_least_one"
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "arguments": [],
            "created_at": 1648613900.693208,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_cardinality_equality",
            "original_file_path": "macros/schema_tests/cardinality_equality.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/cardinality_equality.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality"
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "arguments": [],
            "created_at": 1648613900.7221556,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_equal_rowcount",
            "original_file_path": "macros/schema_tests/equal_rowcount.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/equal_rowcount.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount"
        },
        "macro.dbt_utils.default__test_equality": {
            "arguments": [],
            "created_at": 1648613900.685259,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_equality",
            "original_file_path": "macros/schema_tests/equality.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/equality.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_equality"
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "arguments": [],
            "created_at": 1648613900.7190428,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_expression_is_true",
            "original_file_path": "macros/schema_tests/expression_is_true.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/expression_is_true.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_expression_is_true"
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "arguments": [],
            "created_at": 1648613900.6911936,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_fewer_rows_than",
            "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/fewer_rows_than.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than"
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "arguments": [],
            "created_at": 1648613900.7171736,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "meta": {},
            "name": "default__test_mutually_exclusive_ranges",
            "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges"
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "arguments": [],
            "created_at": 1648613900.7085502,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_not_accepted_values",
            "original_file_path": "macros/schema_tests/not_accepted_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_accepted_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values"
        },
        "macro.dbt_utils.default__test_not_constant": {
            "arguments": [],
            "created_at": 1648613900.7234166,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_not_constant",
            "original_file_path": "macros/schema_tests/not_constant.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_constant.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_not_constant"
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "arguments": [],
            "created_at": 1648613900.697099,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_not_null_proportion",
            "original_file_path": "macros/schema_tests/not_null_proportion.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_null_proportion.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion"
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "arguments": [],
            "created_at": 1648613900.7204854,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
            "meta": {},
            "name": "default__test_not_null_where",
            "original_file_path": "macros/schema_tests/test_not_null_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/test_not_null_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_not_null_where"
        },
        "macro.dbt_utils.default__test_recency": {
            "arguments": [],
            "created_at": 1648613900.6870718,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_recency",
            "original_file_path": "macros/schema_tests/recency.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/recency.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_recency"
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "arguments": [],
            "created_at": 1648613900.7034876,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_relationships_where",
            "original_file_path": "macros/schema_tests/relationships_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/relationships_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_relationships_where"
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "arguments": [],
            "created_at": 1648613900.7063825,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_sequential_values",
            "original_file_path": "macros/schema_tests/sequential_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/sequential_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_sequential_values"
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "arguments": [],
            "created_at": 1648613900.6999652,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "meta": {},
            "name": "default__test_unique_combination_of_columns",
            "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/unique_combination_of_columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns"
        },
        "macro.dbt_utils.default__test_unique_where": {
            "arguments": [],
            "created_at": 1648613900.6946914,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
            "meta": {},
            "name": "default__test_unique_where",
            "original_file_path": "macros/schema_tests/test_unique_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/test_unique_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__test_unique_where"
        },
        "macro.dbt_utils.default__type_bigint": {
            "arguments": [],
            "created_at": 1648613900.7334855,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
            "meta": {},
            "name": "default__type_bigint",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_bigint"
        },
        "macro.dbt_utils.default__type_float": {
            "arguments": [],
            "created_at": 1648613900.7320309,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
            "meta": {},
            "name": "default__type_float",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_float"
        },
        "macro.dbt_utils.default__type_int": {
            "arguments": [],
            "created_at": 1648613900.7342017,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
            "meta": {},
            "name": "default__type_int",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_int"
        },
        "macro.dbt_utils.default__type_numeric": {
            "arguments": [],
            "created_at": 1648613900.732752,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
            "meta": {},
            "name": "default__type_numeric",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_numeric"
        },
        "macro.dbt_utils.default__type_string": {
            "arguments": [],
            "created_at": 1648613900.7299325,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
            "meta": {},
            "name": "default__type_string",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_string"
        },
        "macro.dbt_utils.default__type_timestamp": {
            "arguments": [],
            "created_at": 1648613900.731137,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
            "meta": {},
            "name": "default__type_timestamp",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__type_timestamp"
        },
        "macro.dbt_utils.default__union_relations": {
            "arguments": [],
            "created_at": 1648613900.8241901,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "meta": {},
            "name": "default__union_relations",
            "original_file_path": "macros/sql/union.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/union.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__union_relations"
        },
        "macro.dbt_utils.default__unpivot": {
            "arguments": [],
            "created_at": 1648613900.834126,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "default__unpivot",
            "original_file_path": "macros/sql/unpivot.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/unpivot.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__unpivot"
        },
        "macro.dbt_utils.default__width_bucket": {
            "arguments": [],
            "created_at": 1648613900.785448,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "meta": {},
            "name": "default__width_bucket",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/width_bucket.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default__width_bucket"
        },
        "macro.dbt_utils.default_last_day": {
            "arguments": [],
            "created_at": 1648613900.7778153,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
            "meta": {},
            "name": "default_last_day",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/last_day.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.default_last_day"
        },
        "macro.dbt_utils.degrees_to_radians": {
            "arguments": [],
            "created_at": 1648613900.8454297,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "meta": {},
            "name": "degrees_to_radians",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/haversine_distance.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.degrees_to_radians"
        },
        "macro.dbt_utils.escape_single_quotes": {
            "arguments": [],
            "created_at": 1648613900.7440722,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__escape_single_quotes"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "meta": {},
            "name": "escape_single_quotes",
            "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/escape_single_quotes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.escape_single_quotes"
        },
        "macro.dbt_utils.except": {
            "arguments": [],
            "created_at": 1648613900.7428331,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__except"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
            "meta": {},
            "name": "except",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/except.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.except"
        },
        "macro.dbt_utils.generate_series": {
            "arguments": [],
            "created_at": 1648613900.7914197,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "meta": {},
            "name": "generate_series",
            "original_file_path": "macros/sql/generate_series.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/generate_series.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.generate_series"
        },
        "macro.dbt_utils.get_column_values": {
            "arguments": [],
            "created_at": 1648613900.808459,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_column_values",
            "original_file_path": "macros/sql/get_column_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_column_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_column_values"
        },
        "macro.dbt_utils.get_intervals_between": {
            "arguments": [],
            "created_at": 1648613900.8816445,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "get_intervals_between",
            "original_file_path": "macros/sql/date_spine.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/date_spine.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_intervals_between"
        },
        "macro.dbt_utils.get_period_boundaries": {
            "arguments": [],
            "created_at": 1648613900.659429,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_period_boundaries",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_period_boundaries"
        },
        "macro.dbt_utils.get_period_sql": {
            "arguments": [],
            "created_at": 1648613900.661408,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_period_sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_period_sql"
        },
        "macro.dbt_utils.get_powers_of_two": {
            "arguments": [],
            "created_at": 1648613900.7899659,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_powers_of_two",
            "original_file_path": "macros/sql/generate_series.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/generate_series.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_powers_of_two"
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "arguments": [],
            "created_at": 1648613900.7950006,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_query_results_as_dict",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_query_results_as_dict.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_query_results_as_dict"
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "arguments": [],
            "created_at": 1648613900.889588,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_relations_by_pattern",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_relations_by_pattern.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_relations_by_pattern"
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "arguments": [],
            "created_at": 1648613900.8044415,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_relations_by_prefix",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_relations_by_prefix.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_relations_by_prefix"
        },
        "macro.dbt_utils.get_table_types_sql": {
            "arguments": [],
            "created_at": 1648613900.7936037,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__get_table_types_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "get_table_types_sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_table_types_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_table_types_sql"
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "arguments": [],
            "created_at": 1648613900.7992625,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_tables_by_pattern_sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql"
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "arguments": [],
            "created_at": 1648613900.8253107,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_tables_by_prefix_sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql"
        },
        "macro.dbt_utils.get_url_host": {
            "arguments": [],
            "created_at": 1648613900.675978,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_url_host",
            "original_file_path": "macros/web/get_url_host.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_host.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_url_host"
        },
        "macro.dbt_utils.get_url_parameter": {
            "arguments": [],
            "created_at": 1648613900.6779735,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_url_parameter",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_parameter.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_url_parameter"
        },
        "macro.dbt_utils.get_url_path": {
            "arguments": [],
            "created_at": 1648613900.679947,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "meta": {},
            "name": "get_url_path",
            "original_file_path": "macros/web/get_url_path.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/web/get_url_path.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.get_url_path"
        },
        "macro.dbt_utils.group_by": {
            "arguments": [],
            "created_at": 1648613900.8126101,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "meta": {},
            "name": "group_by",
            "original_file_path": "macros/sql/groupby.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/groupby.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.group_by"
        },
        "macro.dbt_utils.hash": {
            "arguments": [],
            "created_at": 1648613900.7351787,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
            "meta": {},
            "name": "hash",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/hash.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.hash"
        },
        "macro.dbt_utils.haversine_distance": {
            "arguments": [],
            "created_at": 1648613900.8460972,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "meta": {},
            "name": "haversine_distance",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/haversine_distance.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.haversine_distance"
        },
        "macro.dbt_utils.identifier": {
            "arguments": [],
            "created_at": 1648613900.7400312,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__identifier"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
            "meta": {},
            "name": "identifier",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/identifier.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.identifier"
        },
        "macro.dbt_utils.intersect": {
            "arguments": [],
            "created_at": 1648613900.7691581,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__intersect"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
            "meta": {},
            "name": "intersect",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/intersect.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.intersect"
        },
        "macro.dbt_utils.last_day": {
            "arguments": [],
            "created_at": 1648613900.7771645,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__last_day"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
            "meta": {},
            "name": "last_day",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/last_day.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.last_day"
        },
        "macro.dbt_utils.length": {
            "arguments": [],
            "created_at": 1648613900.766952,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "meta": {},
            "name": "length",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/length.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.length"
        },
        "macro.dbt_utils.log_info": {
            "arguments": [],
            "created_at": 1648613900.724158,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "meta": {},
            "name": "log_info",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/log_info.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.log_info"
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "arguments": [],
            "created_at": 1648613900.6750069,
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
            "meta": {},
            "name": "materialization_insert_by_period_default",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default"
        },
        "macro.dbt_utils.nullcheck": {
            "arguments": [],
            "created_at": 1648613900.842676,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "meta": {},
            "name": "nullcheck",
            "original_file_path": "macros/sql/nullcheck.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/nullcheck.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.nullcheck"
        },
        "macro.dbt_utils.nullcheck_table": {
            "arguments": [],
            "created_at": 1648613900.840926,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "meta": {},
            "name": "nullcheck_table",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/nullcheck_table.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.nullcheck_table"
        },
        "macro.dbt_utils.pivot": {
            "arguments": [],
            "created_at": 1648613900.8363757,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "meta": {},
            "name": "pivot",
            "original_file_path": "macros/sql/pivot.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/pivot.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.pivot"
        },
        "macro.dbt_utils.position": {
            "arguments": [],
            "created_at": 1648613900.7414694,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__position"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
            "meta": {},
            "name": "position",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/position.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.position"
        },
        "macro.dbt_utils.postgres__any_value": {
            "arguments": [],
            "created_at": 1648613900.7883353,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}",
            "meta": {},
            "name": "postgres__any_value",
            "original_file_path": "macros/cross_db_utils/any_value.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/any_value.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__any_value"
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "arguments": [],
            "created_at": 1648613900.751841,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "meta": {},
            "name": "postgres__current_timestamp_in_utc",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc"
        },
        "macro.dbt_utils.postgres__dateadd": {
            "arguments": [],
            "created_at": 1648613900.7382648,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "meta": {},
            "name": "postgres__dateadd",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/dateadd.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__dateadd"
        },
        "macro.dbt_utils.postgres__datediff": {
            "arguments": [],
            "created_at": 1648613900.763352,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
            "meta": {},
            "name": "postgres__datediff",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datediff.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__datediff"
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "arguments": [],
            "created_at": 1648613900.7940001,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}",
            "meta": {},
            "name": "postgres__get_table_types_sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/get_table_types_sql.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql"
        },
        "macro.dbt_utils.postgres__last_day": {
            "arguments": [],
            "created_at": 1648613900.7791278,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "meta": {},
            "name": "postgres__last_day",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/last_day.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__last_day"
        },
        "macro.dbt_utils.postgres__type_string": {
            "arguments": [],
            "created_at": 1648613900.7302825,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
            "meta": {},
            "name": "postgres__type_string",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__type_string"
        },
        "macro.dbt_utils.postgres__type_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7313097,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}",
            "meta": {},
            "name": "postgres__type_timestamp",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.postgres__type_timestamp"
        },
        "macro.dbt_utils.pretty_log_format": {
            "arguments": [],
            "created_at": 1648613900.7278008,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "meta": {},
            "name": "pretty_log_format",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.pretty_log_format"
        },
        "macro.dbt_utils.pretty_time": {
            "arguments": [],
            "created_at": 1648613900.7253714,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "meta": {},
            "name": "pretty_time",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/pretty_time.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.pretty_time"
        },
        "macro.dbt_utils.redshift__cast_bool_to_text": {
            "arguments": [],
            "created_at": 1648613900.771106,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
            "meta": {},
            "name": "redshift__cast_bool_to_text",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text"
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "arguments": [],
            "created_at": 1648613900.750276,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
            "meta": {},
            "name": "redshift__current_timestamp",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__current_timestamp"
        },
        "macro.dbt_utils.redshift__current_timestamp_in_utc": {
            "arguments": [],
            "created_at": 1648613900.7521503,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
            "meta": {},
            "name": "redshift__current_timestamp_in_utc",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc"
        },
        "macro.dbt_utils.redshift__dateadd": {
            "arguments": [],
            "created_at": 1648613900.7387218,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "redshift__dateadd",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/dateadd.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__dateadd"
        },
        "macro.dbt_utils.redshift__datediff": {
            "arguments": [],
            "created_at": 1648613900.7638354,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "redshift__datediff",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datediff.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__datediff"
        },
        "macro.dbt_utils.redshift__last_day": {
            "arguments": [],
            "created_at": 1648613900.7795413,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "redshift__last_day",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/last_day.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__last_day"
        },
        "macro.dbt_utils.redshift__length": {
            "arguments": [],
            "created_at": 1648613900.767453,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
            "meta": {},
            "name": "redshift__length",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/length.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__length"
        },
        "macro.dbt_utils.redshift__type_string": {
            "arguments": [],
            "created_at": 1648613900.7301066,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "redshift__type_string",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__type_string"
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "arguments": [],
            "created_at": 1648613900.7865639,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "meta": {},
            "name": "redshift__width_bucket",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/width_bucket.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.redshift__width_bucket"
        },
        "macro.dbt_utils.replace": {
            "arguments": [],
            "created_at": 1648613900.7719975,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "meta": {},
            "name": "replace",
            "original_file_path": "macros/cross_db_utils/replace.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/replace.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.replace"
        },
        "macro.dbt_utils.right": {
            "arguments": [],
            "created_at": 1648613900.765039,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__right"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
            "meta": {},
            "name": "right",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/right.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.right"
        },
        "macro.dbt_utils.safe_add": {
            "arguments": [],
            "created_at": 1648613900.839419,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
            "meta": {},
            "name": "safe_add",
            "original_file_path": "macros/sql/safe_add.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/safe_add.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.safe_add"
        },
        "macro.dbt_utils.safe_cast": {
            "arguments": [],
            "created_at": 1648613900.7749653,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_cast"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
            "meta": {},
            "name": "safe_cast",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/safe_cast.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.safe_cast"
        },
        "macro.dbt_utils.slugify": {
            "arguments": [],
            "created_at": 1648613900.7270625,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "meta": {},
            "name": "slugify",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/jinja_helpers/slugify.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.slugify"
        },
        "macro.dbt_utils.snowflake__bool_or": {
            "arguments": [],
            "created_at": 1648613900.7737486,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}",
            "meta": {},
            "name": "snowflake__bool_or",
            "original_file_path": "macros/cross_db_utils/bool_or.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/bool_or.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__bool_or"
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "arguments": [],
            "created_at": 1648613900.7514415,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "meta": {},
            "name": "snowflake__current_timestamp_in_utc",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc"
        },
        "macro.dbt_utils.snowflake__escape_single_quotes": {
            "arguments": [],
            "created_at": 1648613900.7447286,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "meta": {},
            "name": "snowflake__escape_single_quotes",
            "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/escape_single_quotes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes"
        },
        "macro.dbt_utils.snowflake__right": {
            "arguments": [],
            "created_at": 1648613900.7661397,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
            "meta": {},
            "name": "snowflake__right",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/right.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__right"
        },
        "macro.dbt_utils.snowflake__safe_cast": {
            "arguments": [],
            "created_at": 1648613900.775611,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
            "meta": {},
            "name": "snowflake__safe_cast",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/safe_cast.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__safe_cast"
        },
        "macro.dbt_utils.snowflake__type_string": {
            "arguments": [],
            "created_at": 1648613900.730461,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
            "meta": {},
            "name": "snowflake__type_string",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__type_string"
        },
        "macro.dbt_utils.snowflake__type_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7314794,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
            "meta": {},
            "name": "snowflake__type_timestamp",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__type_timestamp"
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "arguments": [],
            "created_at": 1648613900.7870202,
            "depends_on": {
                "macros": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "meta": {},
            "name": "snowflake__width_bucket",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/width_bucket.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.snowflake__width_bucket"
        },
        "macro.dbt_utils.split_part": {
            "arguments": [],
            "created_at": 1648613900.753198,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "meta": {},
            "name": "split_part",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/split_part.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.split_part"
        },
        "macro.dbt_utils.star": {
            "arguments": [],
            "created_at": 1648613900.893319,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
            "meta": {},
            "name": "star",
            "original_file_path": "macros/sql/star.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/star.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.star"
        },
        "macro.dbt_utils.string_literal": {
            "arguments": [],
            "created_at": 1648613900.7682054,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "string_literal",
            "original_file_path": "macros/cross_db_utils/literal.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/literal.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.string_literal"
        },
        "macro.dbt_utils.surrogate_key": {
            "arguments": [],
            "created_at": 1648613900.885837,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "meta": {},
            "name": "surrogate_key",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/surrogate_key.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.surrogate_key"
        },
        "macro.dbt_utils.test_accepted_range": {
            "arguments": [],
            "created_at": 1648613900.6884356,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_accepted_range",
            "original_file_path": "macros/schema_tests/accepted_range.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/accepted_range.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_accepted_range"
        },
        "macro.dbt_utils.test_at_least_one": {
            "arguments": [],
            "created_at": 1648613900.7008362,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_at_least_one",
            "original_file_path": "macros/schema_tests/at_least_one.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/at_least_one.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_at_least_one"
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "arguments": [],
            "created_at": 1648613900.6924007,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_cardinality_equality",
            "original_file_path": "macros/schema_tests/cardinality_equality.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/cardinality_equality.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_cardinality_equality"
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "arguments": [],
            "created_at": 1648613900.7214649,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_equal_rowcount",
            "original_file_path": "macros/schema_tests/equal_rowcount.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/equal_rowcount.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_equal_rowcount"
        },
        "macro.dbt_utils.test_equality": {
            "arguments": [],
            "created_at": 1648613900.6831396,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_equality",
            "original_file_path": "macros/schema_tests/equality.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/equality.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_equality"
        },
        "macro.dbt_utils.test_expression_is_true": {
            "arguments": [],
            "created_at": 1648613900.718349,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_expression_is_true",
            "original_file_path": "macros/schema_tests/expression_is_true.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/expression_is_true.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_expression_is_true"
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "arguments": [],
            "created_at": 1648613900.690687,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_fewer_rows_than",
            "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/fewer_rows_than.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_fewer_rows_than"
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "arguments": [],
            "created_at": 1648613900.7135348,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_mutually_exclusive_ranges",
            "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges"
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "arguments": [],
            "created_at": 1648613900.7076213,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_not_accepted_values",
            "original_file_path": "macros/schema_tests/not_accepted_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_accepted_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_not_accepted_values"
        },
        "macro.dbt_utils.test_not_constant": {
            "arguments": [],
            "created_at": 1648613900.7230053,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_not_constant",
            "original_file_path": "macros/schema_tests/not_constant.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_constant.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_not_constant"
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "arguments": [],
            "created_at": 1648613900.6957386,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
            "meta": {},
            "name": "test_not_null_proportion",
            "original_file_path": "macros/schema_tests/not_null_proportion.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/not_null_proportion.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_not_null_proportion"
        },
        "macro.dbt_utils.test_not_null_where": {
            "arguments": [],
            "created_at": 1648613900.7201,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "meta": {},
            "name": "test_not_null_where",
            "original_file_path": "macros/schema_tests/test_not_null_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/test_not_null_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_not_null_where"
        },
        "macro.dbt_utils.test_recency": {
            "arguments": [],
            "created_at": 1648613900.6862922,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_recency",
            "original_file_path": "macros/schema_tests/recency.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/recency.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_recency"
        },
        "macro.dbt_utils.test_relationships_where": {
            "arguments": [],
            "created_at": 1648613900.702677,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_relationships_where",
            "original_file_path": "macros/schema_tests/relationships_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/relationships_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_relationships_where"
        },
        "macro.dbt_utils.test_sequential_values": {
            "arguments": [],
            "created_at": 1648613900.7049036,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
            "meta": {},
            "name": "test_sequential_values",
            "original_file_path": "macros/schema_tests/sequential_values.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/sequential_values.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_sequential_values"
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "arguments": [],
            "created_at": 1648613900.6984394,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "meta": {},
            "name": "test_unique_combination_of_columns",
            "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/unique_combination_of_columns.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns"
        },
        "macro.dbt_utils.test_unique_where": {
            "arguments": [],
            "created_at": 1648613900.6942954,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "meta": {},
            "name": "test_unique_where",
            "original_file_path": "macros/schema_tests/test_unique_where.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/schema_tests/test_unique_where.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.test_unique_where"
        },
        "macro.dbt_utils.type_bigint": {
            "arguments": [],
            "created_at": 1648613900.7333126,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_bigint"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_bigint",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_bigint"
        },
        "macro.dbt_utils.type_float": {
            "arguments": [],
            "created_at": 1648613900.7318525,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_float"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_float",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_float"
        },
        "macro.dbt_utils.type_int": {
            "arguments": [],
            "created_at": 1648613900.7340295,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_int"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_int",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_int"
        },
        "macro.dbt_utils.type_numeric": {
            "arguments": [],
            "created_at": 1648613900.7325783,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_numeric"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_numeric",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_numeric"
        },
        "macro.dbt_utils.type_string": {
            "arguments": [],
            "created_at": 1648613900.7297459,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__type_string"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_string",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_string"
        },
        "macro.dbt_utils.type_timestamp": {
            "arguments": [],
            "created_at": 1648613900.7309592,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__type_timestamp"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "meta": {},
            "name": "type_timestamp",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/datatypes.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.type_timestamp"
        },
        "macro.dbt_utils.union_relations": {
            "arguments": [],
            "created_at": 1648613900.8170912,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
            "meta": {},
            "name": "union_relations",
            "original_file_path": "macros/sql/union.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/union.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.union_relations"
        },
        "macro.dbt_utils.unpivot": {
            "arguments": [],
            "created_at": 1648613900.829228,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
            "meta": {},
            "name": "unpivot",
            "original_file_path": "macros/sql/unpivot.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/sql/unpivot.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.unpivot"
        },
        "macro.dbt_utils.width_bucket": {
            "arguments": [],
            "created_at": 1648613900.784189,
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "meta": {},
            "name": "width_bucket",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "package_name": "dbt_utils",
            "patch_path": null,
            "path": "macros/cross_db_utils/width_bucket.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project/dbt_packages/dbt_utils",
            "tags": [],
            "unique_id": "macro.dbt_utils.width_bucket"
        },
        "macro.jaffle_shop.example_macro": {
            "arguments": [
                {
                    "description": "The first argument",
                    "name": "arg_1",
                    "type": "str"
                },
                {
                    "description": "The second argument",
                    "name": "arg_2",
                    "type": "int"
                }
            ],
            "created_at": 1648613901.4649706,
            "depends_on": {
                "macros": []
            },
            "description": "A macro that does a thing",
            "docs": {
                "show": true
            },
            "macro_sql": "{% macro example_macro(arg_1, arg_2) %}\n\n    The provided args are {{ arg_1 }} and {{ arg_2 }}\n\n{% endmacro %}",
            "meta": {},
            "name": "example_macro",
            "original_file_path": "macros/example_macro.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://macros/macros.yml",
            "path": "macros/example_macro.sql",
            "resource_type": "macro",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "tags": [],
            "unique_id": "macro.jaffle_shop.example_macro"
        }
    },
    "metadata": {
        "adapter_type": "postgres",
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json",
        "dbt_version": "1.0.4",
        "env": {},
        "generated_at": "2022-03-30T04:18:20.387980Z",
        "invocation_id": "da09f685-516a-40c5-802c-e2719e2b1f6b",
        "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b",
        "send_anonymous_usage_stats": true,
        "user_id": "afc6c294-87b8-4c59-8347-61385d6eedff"
    },
    "metrics": {
        "metric.jaffle_shop.cohorted_lifetime_value": {
            "created_at": 1648613901.338431,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.dim_customers"
                ]
            },
            "description": "Customer lifetime value, cohorted by first order date",
            "dimensions": [],
            "filters": [],
            "fqn": [
                "jaffle_shop",
                "cohorted_lifetime_value"
            ],
            "label": "Number of orders",
            "meta": {},
            "model": "ref('dim_customers')",
            "name": "cohorted_lifetime_value",
            "original_file_path": "models/metrics.yml",
            "package_name": "jaffle_shop",
            "path": "metrics.yml",
            "refs": [
                [
                    "dim_customers"
                ]
            ],
            "resource_type": "metric",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "sources": [],
            "sql": "customer_lifetime_value",
            "tags": [],
            "time_grains": [
                "week",
                "month",
                "year"
            ],
            "timestamp": "first_order",
            "type": "sum",
            "unique_id": "metric.jaffle_shop.cohorted_lifetime_value"
        },
        "metric.jaffle_shop.count_orders": {
            "created_at": 1648613901.3350306,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "dimensions": [],
            "filters": [],
            "fqn": [
                "jaffle_shop",
                "count_orders"
            ],
            "label": "Number of orders",
            "meta": {},
            "model": "ref('fct_orders')",
            "name": "count_orders",
            "original_file_path": "models/metrics.yml",
            "package_name": "jaffle_shop",
            "path": "metrics.yml",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "resource_type": "metric",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "sources": [],
            "sql": "*",
            "tags": [],
            "time_grains": [
                "day",
                "week",
                "month",
                "year"
            ],
            "timestamp": "order_date",
            "type": "count",
            "unique_id": "metric.jaffle_shop.count_orders"
        }
    },
    "nodes": {
        "analysis.jaffle_shop.my_analysis": {
            "alias": "my_analysis",
            "build_path": null,
            "checksum": {
                "checksum": "73dbf1cfe9b0cb2d6c44583012e36dd3526a4db58bfd628e0485e10de95dae84",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/analysis/my_analysis.sql",
            "compiled_sql": "select count(*) from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "table",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.459882,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "Here are the docs for my really cool analysis",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "analysis",
                "my_analysis"
            ],
            "meta": {},
            "name": "my_analysis",
            "original_file_path": "analysis/my_analysis.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://analysis/analysis.yml",
            "path": "analysis/my_analysis.sql",
            "raw_sql": "select count(*) from {{ ref('stg_orders') }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "analysis",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "analysis.jaffle_shop.my_analysis",
            "unrendered_config": {
                "materialized": "table"
            }
        },
        "model.jaffle_shop.customer_orders": {
            "alias": "customer_orders",
            "build_path": null,
            "checksum": {
                "checksum": "20c96fcb3cf2235582de807d64cd1cdbdd3a419786bf1ceaae0ef208e7ed3dd7",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/intermediate/customer_orders.sql",
            "compiled_sql": "with orders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n)\n\nselect * from final",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "ephemeral",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.2604322,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "intermediate",
                "customer_orders"
            ],
            "meta": {},
            "name": "customer_orders",
            "original_file_path": "models/marts/core/intermediate/customer_orders.sql",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "marts/core/intermediate/customer_orders.sql",
            "raw_sql": "with orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\nfinal as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n)\n\nselect * from final",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "model.jaffle_shop.customer_orders",
            "unrendered_config": {
                "materialized": "ephemeral"
            }
        },
        "model.jaffle_shop.customer_payments": {
            "alias": "customer_payments",
            "build_path": null,
            "checksum": {
                "checksum": "feb9a66904fe7968464b947a2289c795d58fbc7f1e14a3c9975dc261d94cb351",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/intermediate/customer_payments.sql",
            "compiled_sql": "with payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n)\n\nselect * from final",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "ephemeral",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.2625663,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_payments",
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "intermediate",
                "customer_payments"
            ],
            "meta": {},
            "name": "customer_payments",
            "original_file_path": "models/marts/core/intermediate/customer_payments.sql",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "marts/core/intermediate/customer_payments.sql",
            "raw_sql": "with payments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\nfinal as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n)\n\nselect * from final",
            "refs": [
                [
                    "stg_payments"
                ],
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "model.jaffle_shop.customer_payments",
            "unrendered_config": {
                "materialized": "ephemeral"
            }
        },
        "model.jaffle_shop.dim_customers": {
            "alias": "dim_customers",
            "build_path": null,
            "checksum": {
                "checksum": "95d544c0e900d9ac69d0471bad24e03c63a268dbc493559023b58b7618c49b3a",
                "name": "sha256"
            },
            "columns": {
                "customer_id": {
                    "data_type": null,
                    "description": "This is a unique identifier for a customer",
                    "meta": {},
                    "name": "customer_id",
                    "quote": null,
                    "tags": []
                },
                "email": {
                    "data_type": null,
                    "description": "Customer's email address. PII.",
                    "meta": {},
                    "name": "email",
                    "quote": null,
                    "tags": []
                },
                "first_name": {
                    "data_type": null,
                    "description": "Customer's first name. PII.",
                    "meta": {},
                    "name": "first_name",
                    "quote": null,
                    "tags": []
                },
                "first_order": {
                    "data_type": null,
                    "description": "Date (UTC) of a customer's first order",
                    "meta": {},
                    "name": "first_order",
                    "quote": null,
                    "tags": []
                },
                "last_name": {
                    "data_type": null,
                    "description": "Customer's last name. PII.",
                    "meta": {},
                    "name": "last_name",
                    "quote": null,
                    "tags": []
                },
                "most_recent_order": {
                    "data_type": null,
                    "description": "Date (UTC) of a customer's most recent order",
                    "meta": {},
                    "name": "most_recent_order",
                    "quote": null,
                    "tags": []
                },
                "number_of_orders": {
                    "data_type": null,
                    "description": "Count of the number of orders a customer has placed",
                    "meta": {},
                    "name": "number_of_orders",
                    "quote": null,
                    "tags": []
                },
                "total_order_amount": {
                    "data_type": null,
                    "description": "Total value (AUD) of a customer's orders",
                    "meta": {},
                    "name": "total_order_amount",
                    "quote": null,
                    "tags": []
                }
            },
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/dim_customers.sql",
            "compiled_sql": "with  __dbt__cte__customer_orders as (\nwith orders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n)\n\nselect * from final\n),  __dbt__cte__customer_payments as (\nwith payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n)\n\nselect * from final\n),customers as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_customers\"\n\n),\n\ncustomer_orders as (\n\n    select * from __dbt__cte__customer_orders\n\n),\n\ncustomer_payments as (\n\n    select * from __dbt__cte__customer_payments\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n    left join customer_payments using (customer_id)\n\n)\n\nselect * from final",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "table",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.4134133,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_customers",
                    "model.jaffle_shop.customer_orders",
                    "model.jaffle_shop.customer_payments"
                ]
            },
            "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
            "docs": {
                "show": true
            },
            "extra_ctes": [
                {
                    "id": "model.jaffle_shop.customer_orders",
                    "sql": " __dbt__cte__customer_orders as (\nwith orders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n)\n\nselect * from final\n)"
                },
                {
                    "id": "model.jaffle_shop.customer_payments",
                    "sql": " __dbt__cte__customer_payments as (\nwith payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\nfinal as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n)\n\nselect * from final\n)"
                }
            ],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "dim_customers"
            ],
            "meta": {},
            "name": "dim_customers",
            "original_file_path": "models/marts/core/dim_customers.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/marts/core/schema.yml",
            "path": "marts/core/dim_customers.sql",
            "raw_sql": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\ncustomer_orders as (\n\n    select * from {{ ref('customer_orders') }}\n\n),\n\ncustomer_payments as (\n\n    select * from {{ ref('customer_payments') }}\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n    left join customer_payments using (customer_id)\n\n)\n\nselect * from final",
            "refs": [
                [
                    "stg_customers"
                ],
                [
                    "customer_orders"
                ],
                [
                    "customer_payments"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"dim_customers\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "model.jaffle_shop.dim_customers",
            "unrendered_config": {
                "materialized": "table"
            }
        },
        "model.jaffle_shop.fct_orders": {
            "alias": "fct_orders",
            "build_path": null,
            "checksum": {
                "checksum": "49634cca4e40171ea98f62a1a3a9999e3487c42aca3ee79ecaaf99900ead1fd8",
                "name": "sha256"
            },
            "columns": {
                "amount": {
                    "data_type": null,
                    "description": "Total amount (AUD) of the order",
                    "meta": {},
                    "name": "amount",
                    "quote": null,
                    "tags": []
                },
                "bank_transfer_amount": {
                    "data_type": null,
                    "description": "Amount of the order (AUD) paid for by bank transfer",
                    "meta": {},
                    "name": "bank_transfer_amount",
                    "quote": null,
                    "tags": []
                },
                "coupon_amount": {
                    "data_type": null,
                    "description": "Amount of the order (AUD) paid for by coupon",
                    "meta": {},
                    "name": "coupon_amount",
                    "quote": null,
                    "tags": []
                },
                "credit_card_amount": {
                    "data_type": null,
                    "description": "Amount of the order (AUD) paid for by credit card",
                    "meta": {},
                    "name": "credit_card_amount",
                    "quote": null,
                    "tags": []
                },
                "customer_id": {
                    "data_type": null,
                    "description": "Foreign key to the customers table",
                    "meta": {},
                    "name": "customer_id",
                    "quote": null,
                    "tags": []
                },
                "gift_card_amount": {
                    "data_type": null,
                    "description": "Amount of the order (AUD) paid for by gift card",
                    "meta": {},
                    "name": "gift_card_amount",
                    "quote": null,
                    "tags": []
                },
                "order_date": {
                    "data_type": null,
                    "description": "Date (UTC) that the order was placed",
                    "meta": {},
                    "name": "order_date",
                    "quote": null,
                    "tags": []
                },
                "order_id": {
                    "data_type": null,
                    "description": "This is a unique identifier for an order",
                    "meta": {},
                    "name": "order_id",
                    "quote": null,
                    "tags": []
                },
                "status": {
                    "data_type": null,
                    "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
                    "meta": {},
                    "name": "status",
                    "quote": null,
                    "tags": []
                }
            },
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/fct_orders.sql",
            "compiled_sql": "\n\nwith  __dbt__cte__order_payments as (\n\n\nwith payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\nfinal as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n)\n\nselect * from final\n),orders as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n\n),\n\norder_payments as (\n\n    select * from __dbt__cte__order_payments\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n    left join order_payments using (order_id)\n\n)\n\nselect * from final",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "table",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.4173558,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.order_payments"
                ]
            },
            "description": "This table has basic information about orders, as well as some derived facts based on payments",
            "docs": {
                "show": true
            },
            "extra_ctes": [
                {
                    "id": "model.jaffle_shop.order_payments",
                    "sql": " __dbt__cte__order_payments as (\n\n\nwith payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\nfinal as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n)\n\nselect * from final\n)"
                }
            ],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "fct_orders"
            ],
            "meta": {},
            "name": "fct_orders",
            "original_file_path": "models/marts/core/fct_orders.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/marts/core/schema.yml",
            "path": "marts/core/fct_orders.sql",
            "raw_sql": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\norder_payments as (\n\n    select * from {{ ref('order_payments') }}\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{payment_method}}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n    left join order_payments using (order_id)\n\n)\n\nselect * from final",
            "refs": [
                [
                    "stg_orders"
                ],
                [
                    "order_payments"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"fct_orders\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "model.jaffle_shop.fct_orders",
            "unrendered_config": {
                "materialized": "table"
            }
        },
        "model.jaffle_shop.hidden_model": {
            "alias": "hidden_model",
            "build_path": null,
            "checksum": {
                "checksum": "ab09cc6daa39542203d5cbba28e07b823193bf0ce81a86f88a7f705b71fffda5",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/hidden_model.sql",
            "compiled_sql": "-- hack for DAG viz\n-- \"jaffle_shop\".\"dbt_alice\".\"raw_orders\"\n\nselect * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "view",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": [
                    "staging",
                    "hourly"
                ]
            },
            "created_at": 1648613901.3606167,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.jaffle_shop.payments.orders",
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": false
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "staging",
                "hidden_model"
            ],
            "meta": {},
            "name": "hidden_model",
            "original_file_path": "models/staging/hidden_model.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "path": "staging/hidden_model.sql",
            "raw_sql": "-- hack for DAG viz\n-- {{ source('payments', 'orders') }}\n\nselect * from {{ ref('stg_orders') }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"hidden_model\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [
                [
                    "payments",
                    "orders"
                ]
            ],
            "tags": [
                "staging",
                "hourly"
            ],
            "unique_id": "model.jaffle_shop.hidden_model",
            "unrendered_config": {
                "materialized": "view",
                "tags": [
                    "staging",
                    "hourly"
                ]
            }
        },
        "model.jaffle_shop.order_payments": {
            "alias": "order_payments",
            "build_path": null,
            "checksum": {
                "checksum": "6af89b1b7d0e9fe6b2b54118cf2addf0bab34ccc49b054eab93f8d7056fb7c52",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/intermediate/order_payments.sql",
            "compiled_sql": "\n\nwith payments as (\n\n    select * from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n\n),\n\nfinal as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n)\n\nselect * from final",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "ephemeral",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.2649283,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "intermediate",
                "order_payments"
            ],
            "meta": {},
            "name": "order_payments",
            "original_file_path": "models/marts/core/intermediate/order_payments.sql",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "marts/core/intermediate/order_payments.sql",
            "raw_sql": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith payments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\nfinal as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{payment_method}}' then amount else 0 end) as {{payment_method}}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n)\n\nselect * from final",
            "refs": [
                [
                    "stg_payments"
                ]
            ],
            "relation_name": null,
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "model.jaffle_shop.order_payments",
            "unrendered_config": {
                "materialized": "ephemeral"
            }
        },
        "model.jaffle_shop.stg_customers": {
            "alias": "stg_customers",
            "build_path": null,
            "checksum": {
                "checksum": "8aaf3f82d6948a706a8fd6e40493a59446ab84436c800b9bb986d6af6d3dc073",
                "name": "sha256"
            },
            "columns": {
                "customer_id": {
                    "data_type": null,
                    "description": "",
                    "meta": {},
                    "name": "customer_id",
                    "quote": null,
                    "tags": []
                }
            },
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_customers.sql",
            "compiled_sql": "with source as (\n    select * from \"jaffle_shop\".\"dbt_alice\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name,\n        email\n\n    from source\n\n)\n\nselect * from renamed",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "view",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": [
                    "staging",
                    "hourly"
                ]
            },
            "created_at": 1648613901.3547773,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "seed.jaffle_shop.raw_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_customers"
            ],
            "meta": {},
            "name": "stg_customers",
            "original_file_path": "models/staging/stg_customers.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "path": "staging/stg_customers.sql",
            "raw_sql": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name,\n        email\n\n    from source\n\n)\n\nselect * from renamed",
            "refs": [
                [
                    "raw_customers"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"stg_customers\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [
                "staging",
                "hourly"
            ],
            "unique_id": "model.jaffle_shop.stg_customers",
            "unrendered_config": {
                "materialized": "view",
                "tags": [
                    "staging",
                    "hourly"
                ]
            }
        },
        "model.jaffle_shop.stg_orders": {
            "alias": "stg_orders",
            "build_path": null,
            "checksum": {
                "checksum": "5a2807569bc8d9b74f7ffecfbf12d1e3b6dfbc6cbff66dd38ce20306532b6f77",
                "name": "sha256"
            },
            "columns": {
                "order_id": {
                    "data_type": null,
                    "description": "",
                    "meta": {},
                    "name": "order_id",
                    "quote": null,
                    "tags": []
                },
                "status": {
                    "data_type": null,
                    "description": "",
                    "meta": {},
                    "name": "status",
                    "quote": null,
                    "tags": []
                }
            },
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_orders.sql",
            "compiled_sql": "/*\nhack for example macro references:\n    \n\n    The provided args are abc and 123\n\n\n*/\n\nwith source as (\n    select * from \"jaffle_shop\".\"dbt_alice\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "view",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": [
                    "staging",
                    "hourly"
                ]
            },
            "created_at": 1648613901.356332,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.jaffle_shop.example_macro"
                ],
                "nodes": [
                    "seed.jaffle_shop.raw_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_orders"
            ],
            "meta": {},
            "name": "stg_orders",
            "original_file_path": "models/staging/stg_orders.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "path": "staging/stg_orders.sql",
            "raw_sql": "/*\nhack for example macro references:\n    {{ example_macro(\"abc\", \"123\") }}\n*/\n\nwith source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
            "refs": [
                [
                    "raw_orders"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"stg_orders\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [
                "staging",
                "hourly"
            ],
            "unique_id": "model.jaffle_shop.stg_orders",
            "unrendered_config": {
                "materialized": "view",
                "tags": [
                    "staging",
                    "hourly"
                ]
            }
        },
        "model.jaffle_shop.stg_payments": {
            "alias": "stg_payments",
            "build_path": null,
            "checksum": {
                "checksum": "113502ed19f04efb2af0629ff139f57f7463347b6d5218f3b80a8d128cc96852",
                "name": "sha256"
            },
            "columns": {
                "payment_id": {
                    "data_type": null,
                    "description": "",
                    "meta": {},
                    "name": "payment_id",
                    "quote": null,
                    "tags": [
                        "billing"
                    ]
                },
                "payment_method": {
                    "data_type": null,
                    "description": "",
                    "meta": {},
                    "name": "payment_method",
                    "quote": null,
                    "tags": []
                }
            },
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_payments.sql",
            "compiled_sql": "with source as (\n    select * from \"jaffle_shop\".\"dbt_alice\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        --`amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "view",
                "meta": {
                    "SLA": "1 hour",
                    "contains_pii": true,
                    "owner": "@drew"
                },
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "schema": null,
                "tags": [
                    "staging",
                    "hourly"
                ]
            },
            "created_at": 1648613901.360047,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "seed.jaffle_shop.raw_payments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_payments"
            ],
            "meta": {},
            "name": "stg_payments",
            "original_file_path": "models/staging/stg_payments.sql",
            "package_name": "jaffle_shop",
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "path": "staging/stg_payments.sql",
            "raw_sql": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        --`amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
            "refs": [
                [
                    "raw_payments"
                ]
            ],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"stg_payments\"",
            "resource_type": "model",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [
                "staging",
                "hourly"
            ],
            "unique_id": "model.jaffle_shop.stg_payments",
            "unrendered_config": {
                "materialized": "view",
                "tags": [
                    "staging",
                    "hourly"
                ]
            }
        },
        "seed.jaffle_shop.raw_customers": {
            "alias": "raw_customers",
            "build_path": null,
            "checksum": {
                "checksum": "714f9e3dddfcd62fe967462621908ba59cae1502d1661ee8d8649ba7a56cb830",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": null,
            "compiled_sql": "",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "seed",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quote_columns": null,
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.3091483,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "raw_customers"
            ],
            "meta": {},
            "name": "raw_customers",
            "original_file_path": "data/raw_customers.csv",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "raw_customers.csv",
            "raw_sql": "",
            "refs": [],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"raw_customers\"",
            "resource_type": "seed",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "seed.jaffle_shop.raw_customers",
            "unrendered_config": {}
        },
        "seed.jaffle_shop.raw_orders": {
            "alias": "raw_orders",
            "build_path": null,
            "checksum": {
                "checksum": "ee6c68d1639ec2b23a4495ec12475e09b8ed4b61e23ab0411ea7ec76648356f7",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": null,
            "compiled_sql": "",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "seed",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quote_columns": null,
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.310915,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "raw_orders"
            ],
            "meta": {},
            "name": "raw_orders",
            "original_file_path": "data/raw_orders.csv",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "raw_orders.csv",
            "raw_sql": "",
            "refs": [],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"raw_orders\"",
            "resource_type": "seed",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "seed.jaffle_shop.raw_orders",
            "unrendered_config": {}
        },
        "seed.jaffle_shop.raw_payments": {
            "alias": "raw_payments",
            "build_path": null,
            "checksum": {
                "checksum": "03fd407f3135f84456431a923f22fc185a2154079e210c20b690e3ab11687d11",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": null,
            "compiled_sql": "",
            "config": {
                "alias": null,
                "column_types": {},
                "database": null,
                "enabled": true,
                "full_refresh": null,
                "materialized": "seed",
                "meta": {},
                "on_schema_change": "ignore",
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quote_columns": null,
                "quoting": {},
                "schema": null,
                "tags": []
            },
            "created_at": 1648613901.3124852,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "raw_payments"
            ],
            "meta": {},
            "name": "raw_payments",
            "original_file_path": "data/raw_payments.csv",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "raw_payments.csv",
            "raw_sql": "",
            "refs": [],
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"raw_payments\"",
            "resource_type": "seed",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "sources": [],
            "tags": [],
            "unique_id": "seed.jaffle_shop.raw_payments",
            "unrendered_config": {}
        },
        "test.jaffle_shop.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": {
            "alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "status",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81.sql",
            "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n",
            "config": {
                "alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81",
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.441601,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned"
            ],
            "meta": {},
            "name": "accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81.sql",
            "raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81\") }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "status",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}",
                    "values": [
                        "placed",
                        "shipped",
                        "completed",
                        "return_pending",
                        "returned"
                    ]
                },
                "name": "accepted_values",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768",
            "unrendered_config": {
                "alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81"
            }
        },
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {
            "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "status",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql",
            "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n",
            "config": {
                "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.3758008,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"
            ],
            "meta": {},
            "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql",
            "raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "status",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}",
                    "values": [
                        "placed",
                        "shipped",
                        "completed",
                        "return_pending",
                        "returned"
                    ]
                },
                "name": "accepted_values",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
            "unrendered_config": {
                "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"
            }
        },
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {
            "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "payment_method",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql",
            "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n",
            "config": {
                "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.3934913,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_payments",
            "fqn": [
                "jaffle_shop",
                "staging",
                "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"
            ],
            "meta": {},
            "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql",
            "raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}",
            "refs": [
                [
                    "stg_payments"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "payment_method",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}",
                    "values": [
                        "credit_card",
                        "coupon",
                        "bank_transfer",
                        "gift_card"
                    ]
                },
                "name": "accepted_values",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
            "unrendered_config": {
                "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"
            }
        },
        "test.jaffle_shop.example_data_test": {
            "alias": "example_data_test",
            "build_path": null,
            "checksum": {
                "checksum": "b68d2666d3502ec95f54174a518b6d43ee67fac443bf1a66746863f00f053f3b",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/tests/example_data_test.sql",
            "compiled_sql": "select * from \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.290748,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "example_data_test"
            ],
            "meta": {},
            "name": "example_data_test",
            "original_file_path": "tests/example_data_test.sql",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "example_data_test.sql",
            "raw_sql": "select * from {{ ref('stg_orders') }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "unique_id": "test.jaffle_shop.example_data_test",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_dim_customers_customer_id.dd91cd1c8d": {
            "alias": "not_null_dim_customers_customer_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_dim_customers_customer_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"dim_customers\"\nwhere customer_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4203641,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.dim_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.dim_customers",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_dim_customers_customer_id"
            ],
            "meta": {},
            "name": "not_null_dim_customers_customer_id",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_dim_customers_customer_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "dim_customers"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('dim_customers')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_dim_customers_customer_id.dd91cd1c8d",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_amount.66810a8d08": {
            "alias": "not_null_fct_orders_amount",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "amount",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_amount.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere amount is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4476662,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_amount"
            ],
            "meta": {},
            "name": "not_null_fct_orders_amount",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_amount.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "amount",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_amount.66810a8d08",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_bank_transfer_amount.d808dd4fab": {
            "alias": "not_null_fct_orders_bank_transfer_amount",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "bank_transfer_amount",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_bank_transfer_amount.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere bank_transfer_amount is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4533145,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_bank_transfer_amount"
            ],
            "meta": {},
            "name": "not_null_fct_orders_bank_transfer_amount",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_bank_transfer_amount.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "bank_transfer_amount",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_bank_transfer_amount.d808dd4fab",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_coupon_amount.8a700a9568": {
            "alias": "not_null_fct_orders_coupon_amount",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "coupon_amount",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_coupon_amount.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere coupon_amount is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4512854,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_coupon_amount"
            ],
            "meta": {},
            "name": "not_null_fct_orders_coupon_amount",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_coupon_amount.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "coupon_amount",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_coupon_amount.8a700a9568",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_credit_card_amount.56131cba63": {
            "alias": "not_null_fct_orders_credit_card_amount",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "credit_card_amount",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_credit_card_amount.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere credit_card_amount is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4494886,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_credit_card_amount"
            ],
            "meta": {},
            "name": "not_null_fct_orders_credit_card_amount",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_credit_card_amount.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "credit_card_amount",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_credit_card_amount.56131cba63",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_customer_id.16fe324f7b": {
            "alias": "not_null_fct_orders_customer_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_customer_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere customer_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.426015,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_customer_id"
            ],
            "meta": {},
            "name": "not_null_fct_orders_customer_id",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_customer_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_customer_id.16fe324f7b",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_gift_card_amount.ec93756487": {
            "alias": "not_null_fct_orders_gift_card_amount",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "gift_card_amount",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_gift_card_amount.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere gift_card_amount is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4551127,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_gift_card_amount"
            ],
            "meta": {},
            "name": "not_null_fct_orders_gift_card_amount",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_gift_card_amount.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "gift_card_amount",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_gift_card_amount.ec93756487",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_fct_orders_order_id.4e687af8d0": {
            "alias": "not_null_fct_orders_order_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "order_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/not_null_fct_orders_order_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere order_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4242165,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "not_null_fct_orders_order_id"
            ],
            "meta": {},
            "name": "not_null_fct_orders_order_id",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_fct_orders_order_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_fct_orders_order_id.4e687af8d0",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": {
            "alias": "not_null_stg_customers_customer_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_customers\"\nwhere customer_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.370368,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_customers",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_customers_customer_id"
            ],
            "meta": {},
            "name": "not_null_stg_customers_customer_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_stg_customers_customer_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_customers"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": {
            "alias": "not_null_stg_orders_order_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "order_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\nwhere order_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.3739924,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_orders_order_id"
            ],
            "meta": {},
            "name": "not_null_stg_orders_order_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_stg_orders_order_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "unrendered_config": {}
        },
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": {
            "alias": "not_null_stg_payments_payment_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "payment_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql",
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\nwhere payment_id is null\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.3914576,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_payments",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_payments_payment_id"
            ],
            "meta": {},
            "name": "not_null_stg_payments_payment_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "not_null_stg_payments_payment_id.sql",
            "raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_payments"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [
                "billing"
            ],
            "test_metadata": {
                "kwargs": {
                    "column_name": "payment_id",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}"
                },
                "name": "not_null",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
            "unrendered_config": {}
        },
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers.ab4e71dd49": {
            "alias": "relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3.sql",
            "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from dbt_alice.dim_customers\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "config": {
                "alias": "relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3",
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4362981,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers"
            ],
            "meta": {},
            "name": "relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3.sql",
            "raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3\") }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "field": "customer_id",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}",
                    "to": "{{ target.schema}}.dim_customers"
                },
                "name": "relationships",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers.ab4e71dd49",
            "unrendered_config": {
                "alias": "relationships_fct_orders_4e4ea17ebc35f7d2a2225b59352cfce3"
            }
        },
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": {
            "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql",
            "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_shop\".\"dbt_alice\".\"dim_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "config": {
                "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c",
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4278224,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.dim_customers",
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_"
            ],
            "meta": {},
            "name": "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql",
            "raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c\") }}",
            "refs": [
                [
                    "dim_customers"
                ],
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "field": "customer_id",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}",
                    "to": "ref('dim_customers')"
                },
                "name": "relationships",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4",
            "unrendered_config": {
                "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c"
            }
        },
        "test.jaffle_shop.tagged_data_test": {
            "alias": "tagged_data_test",
            "build_path": null,
            "checksum": {
                "checksum": "c1b1411e66ba999f60ac8248f393f9b2f42a0caf111133efa87cec26131fdbc6",
                "name": "sha256"
            },
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/tests/tagged_data_test.sql",
            "compiled_sql": "\n\nselect * from \"jaffle_shop\".\"dbt_alice\".\"stg_customers\"",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [
                    "important"
                ],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.2945209,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "fqn": [
                "jaffle_shop",
                "tagged_data_test"
            ],
            "meta": {},
            "name": "tagged_data_test",
            "original_file_path": "tests/tagged_data_test.sql",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "tagged_data_test.sql",
            "raw_sql": "{{ config(tags = ['important']) }}\n\nselect * from {{ ref('stg_customers') }}",
            "refs": [
                [
                    "stg_customers"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [
                "important"
            ],
            "unique_id": "test.jaffle_shop.tagged_data_test",
            "unrendered_config": {
                "tags": [
                    "important"
                ]
            }
        },
        "test.jaffle_shop.unique_dim_customers_customer_id.15c9f1e2fd": {
            "alias": "unique_dim_customers_customer_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/unique_dim_customers_customer_id.sql",
            "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dbt_alice\".\"dim_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.4183843,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.dim_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.dim_customers",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "unique_dim_customers_customer_id"
            ],
            "meta": {},
            "name": "unique_dim_customers_customer_id",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "unique_dim_customers_customer_id.sql",
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "dim_customers"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('dim_customers')) }}"
                },
                "name": "unique",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.unique_dim_customers_customer_id.15c9f1e2fd",
            "unrendered_config": {}
        },
        "test.jaffle_shop.unique_fct_orders_order_id.523ddb6ce5": {
            "alias": "unique_fct_orders_order_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "order_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/marts/core/schema.yml/unique_fct_orders_order_id.sql",
            "compiled_sql": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dbt_alice\".\"fct_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.422443,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.fct_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.fct_orders",
            "fqn": [
                "jaffle_shop",
                "marts",
                "core",
                "unique_fct_orders_order_id"
            ],
            "meta": {},
            "name": "unique_fct_orders_order_id",
            "original_file_path": "models/marts/core/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "unique_fct_orders_order_id.sql",
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "fct_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('fct_orders')) }}"
                },
                "name": "unique",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.unique_fct_orders_order_id.523ddb6ce5",
            "unrendered_config": {}
        },
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": {
            "alias": "unique_stg_customers_customer_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "customer_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql",
            "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.367361,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_customers",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_customers_customer_id"
            ],
            "meta": {},
            "name": "unique_stg_customers_customer_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "unique_stg_customers_customer_id.sql",
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_customers"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "name": "unique",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada",
            "unrendered_config": {}
        },
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": {
            "alias": "unique_stg_orders_order_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "order_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql",
            "compiled_sql": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.372205,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_orders_order_id"
            ],
            "meta": {},
            "name": "unique_stg_orders_order_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "unique_stg_orders_order_id.sql",
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_orders"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [],
            "test_metadata": {
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "name": "unique",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a",
            "unrendered_config": {}
        },
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": {
            "alias": "unique_stg_payments_payment_id",
            "build_path": null,
            "checksum": {
                "checksum": "",
                "name": "none"
            },
            "column_name": "payment_id",
            "columns": {},
            "compiled": true,
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql",
            "compiled_sql": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dbt_alice\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n",
            "config": {
                "alias": null,
                "database": null,
                "enabled": true,
                "error_if": "!= 0",
                "fail_calc": "count(*)",
                "limit": null,
                "materialized": "test",
                "meta": {},
                "schema": "dbt_test__audit",
                "severity": "ERROR",
                "store_failures": null,
                "tags": [],
                "warn_if": "!= 0",
                "where": null
            },
            "created_at": 1648613901.3893979,
            "database": "jaffle_shop",
            "deferred": false,
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "description": "",
            "docs": {
                "show": true
            },
            "extra_ctes": [],
            "extra_ctes_injected": true,
            "file_key_name": "models.stg_payments",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_payments_payment_id"
            ],
            "meta": {},
            "name": "unique_stg_payments_payment_id",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "unique_stg_payments_payment_id.sql",
            "raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "refs": [
                [
                    "stg_payments"
                ]
            ],
            "relation_name": null,
            "resource_type": "test",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice_dbt_test__audit",
            "sources": [],
            "tags": [
                "billing"
            ],
            "test_metadata": {
                "kwargs": {
                    "column_name": "payment_id",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}"
                },
                "name": "unique",
                "namespace": null
            },
            "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712",
            "unrendered_config": {}
        }
    },
    "parent_map": {
        "analysis.jaffle_shop.my_analysis": [
            "model.jaffle_shop.stg_orders"
        ],
        "exposure.jaffle_shop.company_projections": [
            "model.jaffle_shop.fct_orders"
        ],
        "exposure.jaffle_shop.crm_export": [
            "model.jaffle_shop.dim_customers",
            "model.jaffle_shop.fct_orders"
        ],
        "exposure.jaffle_shop.weekly_metrics": [
            "model.jaffle_shop.dim_customers"
        ],
        "metric.jaffle_shop.cohorted_lifetime_value": [
            "model.jaffle_shop.dim_customers"
        ],
        "metric.jaffle_shop.count_orders": [
            "model.jaffle_shop.fct_orders"
        ],
        "model.jaffle_shop.customer_orders": [
            "model.jaffle_shop.stg_orders"
        ],
        "model.jaffle_shop.customer_payments": [
            "model.jaffle_shop.stg_orders",
            "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.dim_customers": [
            "model.jaffle_shop.customer_orders",
            "model.jaffle_shop.customer_payments",
            "model.jaffle_shop.stg_customers"
        ],
        "model.jaffle_shop.fct_orders": [
            "model.jaffle_shop.order_payments",
            "model.jaffle_shop.stg_orders"
        ],
        "model.jaffle_shop.hidden_model": [
            "model.jaffle_shop.stg_orders",
            "source.jaffle_shop.payments.orders"
        ],
        "model.jaffle_shop.order_payments": [
            "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.stg_customers": [
            "seed.jaffle_shop.raw_customers"
        ],
        "model.jaffle_shop.stg_orders": [
            "seed.jaffle_shop.raw_orders"
        ],
        "model.jaffle_shop.stg_payments": [
            "seed.jaffle_shop.raw_payments"
        ],
        "seed.jaffle_shop.raw_customers": [],
        "seed.jaffle_shop.raw_orders": [],
        "seed.jaffle_shop.raw_payments": [],
        "source.jaffle_shop.payments.orders": [],
        "source.jaffle_shop.payments.tagged_source": [],
        "test.jaffle_shop.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [
            "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.example_data_test": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_dim_customers_customer_id.dd91cd1c8d": [
            "model.jaffle_shop.dim_customers"
        ],
        "test.jaffle_shop.not_null_fct_orders_amount.66810a8d08": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_bank_transfer_amount.d808dd4fab": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_coupon_amount.8a700a9568": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_credit_card_amount.56131cba63": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_customer_id.16fe324f7b": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_gift_card_amount.ec93756487": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_fct_orders_order_id.4e687af8d0": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [
            "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id___target_schema_dim_customers.ab4e71dd49": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": [
            "model.jaffle_shop.dim_customers",
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.tagged_data_test": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.unique_dim_customers_customer_id.15c9f1e2fd": [
            "model.jaffle_shop.dim_customers"
        ],
        "test.jaffle_shop.unique_fct_orders_order_id.523ddb6ce5": [
            "model.jaffle_shop.fct_orders"
        ],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [
            "model.jaffle_shop.stg_payments"
        ]
    },
    "selectors": {},
    "sources": {
        "source.jaffle_shop.payments.orders": {
            "columns": {},
            "config": {
                "enabled": true
            },
            "created_at": 1648613901.4652057,
            "database": "jaffle_shop",
            "description": "",
            "external": null,
            "fqn": [
                "jaffle_shop",
                "staging",
                "payments",
                "orders"
            ],
            "freshness": {
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null,
                "warn_after": {
                    "count": null,
                    "period": null
                }
            },
            "identifier": "raw_orders",
            "loaded_at_field": null,
            "loader": "",
            "meta": {},
            "name": "orders",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "models/staging/schema.yml",
            "quoting": {
                "column": null,
                "database": null,
                "identifier": null,
                "schema": null
            },
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"raw_orders\"",
            "resource_type": "source",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "source_description": "",
            "source_meta": {},
            "source_name": "payments",
            "tags": [],
            "unique_id": "source.jaffle_shop.payments.orders",
            "unrendered_config": {}
        },
        "source.jaffle_shop.payments.tagged_source": {
            "columns": {},
            "config": {
                "enabled": true
            },
            "created_at": 1648613901.4654026,
            "database": "jaffle_shop",
            "description": "",
            "external": null,
            "fqn": [
                "jaffle_shop",
                "staging",
                "payments",
                "tagged_source"
            ],
            "freshness": {
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null,
                "warn_after": {
                    "count": null,
                    "period": null
                }
            },
            "identifier": "raw_customers",
            "loaded_at_field": null,
            "loader": "",
            "meta": {},
            "name": "tagged_source",
            "original_file_path": "models/staging/schema.yml",
            "package_name": "jaffle_shop",
            "patch_path": null,
            "path": "models/staging/schema.yml",
            "quoting": {
                "column": null,
                "database": null,
                "identifier": null,
                "schema": null
            },
            "relation_name": "\"jaffle_shop\".\"dbt_alice\".\"raw_customers\"",
            "resource_type": "source",
            "root_path": "/home/archer/go/src/github.com/jonstacks/dbt-docs/ci-project",
            "schema": "dbt_alice",
            "source_description": "",
            "source_meta": {},
            "source_name": "payments",
            "tags": [
                "important"
            ],
            "unique_id": "source.jaffle_shop.payments.tagged_source",
            "unrendered_config": {}
        }
    }
}
